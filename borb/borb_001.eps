%!PS-Adobe-2.0 EPSF-1.2%%Creator: Vectorworks 2015 SP2 [20.0.2(240846)] (64-Bit app)%%Title: borb_001.eps%%CreationDate: 9/19/2019%%DocumentProcSets: Adobe_packedarray 1.0 0%%DocumentSuppliedProcSets: Adobe_packedarray 1.0 0%%DocumentProcSets: Adobe_cmykcolor 1.1 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 1.1 0%%DocumentProcSets: Adobe_cshow 1.1 0%%DocumentSuppliedProcSets: Adobe_cshow 1.1 0%%DocumentProcSets: Adobe_customcolor 1.0 0%%DocumentSuppliedProcSets: Adobe_customcolor 1.0 0%%DocumentProcSets: Adobe_pattern 1.9 0%%DocumentSuppliedProcSets: Adobe_pattern 1.9 0%%DocumentProcSets: Adobe_Illustrator88 1.19 0%%DocumentSuppliedProcSets: Adobe_Illustrator88 1.19 0%%BoundingBox:0 0 451 668%%TemplateBox:306 396 306 396%%DocumentPreview: Header%%EndComments%%BeginProlog%%BeginProcSet: Adobe_packedarray 1.0 0userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet: Adobe_cmykcolor 1.1 0currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end end	Adobe_cmykcolor begin	} ifelse} def/terminate{currentdict Adobe_cmykcolor eq	{ end	} if} def/setcmykcolor{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 1.1 0currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 1.0 0currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_pattern 1.9 0currentpacking true setpackinguserdict /Adobe_pattern 14 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern begin	Adobe_pattern		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			break			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll pop pop pop pop pop pop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	pop pop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{pop pop}			{pop pop pop true}			{pop pop pop pop pop pop pop true}			{pop true}			pathforall			} stopped			{			pop pop pop pop pop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		pop pop		}		{		pop pop pop pop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternclipAdobe_pattern /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern /patternfill get exec			} pathforall		pop pop	pop		} stopped			{			pop pop pop pop pop			patternclip			Adobe_pattern /patternfill get exec			} if	}	{	patternclip	Adobe_pattern /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern /patternmatrix get 4 1 roll	} if	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	6 index 6 index 6 index	Adobe_pattern /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator88 1.19 0currentpacking true setpackinguserdict /Adobe_Illustrator88 73 dict dup begin put/initialize{userdict /Adobe_Illustrator88_vars 31 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator88 beginAdobe_Illustrator88 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator88 beginAdobe_Illustrator88_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator88_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/sp{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c{curveto} def/C/c load def/v{currentpoint 6 2 roll curveto} def/V/v load def/y{2 copy curveto} def/Y/y load def/l{lineto} def/L/l load def/m{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse/d{setdash} def/cfcurrentflat def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{newpath} def/n/N load def/F{_pf} def/f{closepathF} def/S{_ps} def/s{closepathS} def/B{gsave F grestoreS} def/b{closepathB} def/W{clip} def/ta{_as moveto_tt aload pop 4 -2 roll} def/tl{_tl aload pop translate} def/as{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm{_tm currentmatrix popconcat} def/I{tm/t	{	ta sp	tl	} ddef} def/o{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e{tm/t	{	ta _psf	tl	newpath	} ddef} def/r{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T{_tm setmatrix} def/Z{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def/u{} def/U{} def/q{gsave} def/Q{grestore} def/`{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			10 copy 6 npop exch pop patternashow			}			{			pop			7 copy 3 npop exch pop ashow			} ifelse		grestore		pop		} for	pop	} forrestore4 npop newpath} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			11 copy 6 npop 3 -1 roll pop patternashowstroke			}			{			pop			8 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestore5 npop newpath} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern /initialize get execAdobe_Illustrator88 /initialize get exec%%EndSetup0 A0 O0 R0 g0 G0 i 0 J 0 j 1 w 4 M [] 0 d62.824 461.706  m62.824 502.185 95.638 535 136.118 535 c136.118 535  L176.564 535 209.353 502.185 209.353 461.706 c209.353 457.765 l209.353 457.765  L209.353 417.285 176.564 384.471 136.118 384.471 c136.118 384.471  L95.638 384.471 62.824 417.285 62.824 457.765 c62.824 457.765  L62.824 461.706  L[] 0 d 1 j 1 J0.118 w 0 G S201.412 461.706  m201.412 467.176 200.74 472.628 199.412 477.941 c199.412 477.941  L199.256 478.525 198.998 479.082 198.647 479.588 c198.335 480.095 197.918 480.552 197.412 480.941 c196.944 481.292 196.408 481.59 195.824 481.824 c195.239 482.018 194.623 482.118 194 482.118 c194 482.118  L78.176 482.118  L77.553 482.118 76.937 482.018 76.353 481.824 c75.808 481.59 75.271 481.292 74.765 480.941 c74.297 480.552 73.88 480.095 73.529 479.588 c73.218 479.082 72.979 478.525 72.824 477.941 c72.824 477.941  L71.456 472.628 70.765 467.176 70.765 461.706 c70.765 457.765 l70.765 457.765  L70.765 440.439 77.642 423.808 89.882 411.529 c89.882 411.529  L102.161 399.289 118.792 392.412 136.118 392.412 c136.118 392.412  L153.443 392.412 170.053 399.289 182.294 411.529 c182.294 411.529  L194.535 423.808 201.412 440.439 201.412 457.765 c201.412 457.765  L201.412 461.706  L[] 0 d 1 j 1 J0.118 w 0 G S334.647 455.176 m334.647 444.228 325.785 435.353 314.853 435.353 c303.921 435.353 295.059 444.228 295.059 455.176 c295.059 466.125 303.921 475 314.853 475 c325.785 475 334.647 466.125 334.647 455.176 c[] 0 d 1 j 1 J0.118 w 0 G S241.588 464.235  m241.588 504.715 274.377 537.529 314.824 537.529 c314.824 537.529  L355.303 537.529 388.118 504.715 388.118 464.235 c388.118 460.294 l388.118 460.294  L388.118 419.815 355.303 387 314.824 387 c314.824 387  L274.377 387 241.588 419.815 241.588 460.294 c241.588 460.294  L241.588 464.235  L[] 0 d 1 j 1 J0.118 w 0 G S380.176 464.235  m380.176 469.705 379.485 475.157 378.118 480.471 c378.118 480.471  L378.001 481.055 377.762 481.611 377.412 482.118 c377.061 482.624 376.644 483.081 376.176 483.471 c375.67 483.821 375.133 484.119 374.588 484.353 c374.004 484.548 373.388 484.647 372.765 484.647 c372.765 484.647  L256.941 484.647  L256.318 484.647 255.702 484.548 255.118 484.353 c254.533 484.119 253.997 483.821 253.529 483.471 c253.023 483.081 252.606 482.624 252.294 482.118 c251.944 481.611 251.685 481.055 251.529 480.471 c251.529 480.471  L250.201 475.157 249.529 469.705 249.529 464.235 c249.529 460.294 l249.529 460.294  L249.529 442.969 256.406 426.337 268.647 414.059 c268.647 414.059  L280.888 401.818 297.498 394.941 314.824 394.941 c314.824 394.941  L332.149 394.941 348.78 401.818 361.059 414.059 c361.059 414.059  L373.3 426.337 380.176 442.969 380.176 460.294 c380.176 460.294  L380.176 464.235  L[] 0 d 1 j 1 J0.118 w 0 G S229.588 565.324 m229.588 563.033 227.745 561.176 225.471 561.176 c223.196 561.176 221.353 563.033 221.353 565.324 c221.353 567.614 223.196 569.471 225.471 569.471 c227.745 569.471 229.588 567.614 229.588 565.324 c[] 0 d 1 j 1 J0.118 w 0 G S229.588 225.147 m229.588 222.857 227.745 221 225.471 221 c223.196 221 221.353 222.857 221.353 225.147 c221.353 227.437 223.196 229.294 225.471 229.294 c227.745 229.294 229.588 227.437 229.588 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S228 235.059  m228 555.412  l222.941 555.412  l222.941 235.059  l228 235.059  l[] 0 d 1 j 1 J0.118 w 0 G S247.353 225.147 m247.353 222.564 245.259 220.471 242.676 220.471 c240.094 220.471 238 222.564 238 225.147 c238 227.73 240.094 229.824 242.676 229.824 c245.259 229.824 247.353 227.73 247.353 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S264.706 225.147 m264.706 222.564 262.612 220.471 260.029 220.471 c257.447 220.471 255.353 222.564 255.353 225.147 c255.353 227.73 257.447 229.824 260.029 229.824 c262.612 229.824 264.706 227.73 264.706 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S282 225.147 m282 222.564 279.893 220.471 277.294 220.471 c274.695 220.471 272.588 222.564 272.588 225.147 c272.588 227.73 274.695 229.824 277.294 229.824 c279.893 229.824 282 227.73 282 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S299.235 225.147 m299.235 222.564 297.142 220.471 294.559 220.471 c291.976 220.471 289.882 222.564 289.882 225.147 c289.882 227.73 291.976 229.824 294.559 229.824 c297.142 229.824 299.235 227.73 299.235 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S212.882 225.147 m212.882 222.564 210.789 220.471 208.206 220.471 c205.623 220.471 203.529 222.564 203.529 225.147 c203.529 227.73 205.623 229.824 208.206 229.824 c210.789 229.824 212.882 227.73 212.882 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S195.588 225.147 m195.588 222.564 193.495 220.471 190.912 220.471 c188.329 220.471 186.235 222.564 186.235 225.147 c186.235 227.73 188.329 229.824 190.912 229.824 c193.495 229.824 195.588 227.73 195.588 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S178.353 225.147 m178.353 222.564 176.246 220.471 173.647 220.471 c171.048 220.471 168.941 222.564 168.941 225.147 c168.941 227.73 171.048 229.824 173.647 229.824 c176.246 229.824 178.353 227.73 178.353 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S161.059 225.147 m161.059 222.564 158.965 220.471 156.382 220.471 c153.8 220.471 151.706 222.564 151.706 225.147 c151.706 227.73 153.8 229.824 156.382 229.824 c158.965 229.824 161.059 227.73 161.059 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S230.176 190.588 m230.176 187.989 228.07 185.882 225.471 185.882 c222.872 185.882 220.765 187.989 220.765 190.588 c220.765 193.187 222.872 195.294 225.471 195.294 c228.07 195.294 230.176 193.187 230.176 190.588 c[] 0 d 1 j 1 J0.118 w 0 G S230.176 173.324 m230.176 170.741 228.07 168.647 225.471 168.647 c222.872 168.647 220.765 170.741 220.765 173.324 c220.765 175.906 222.872 178 225.471 178 c228.07 178 230.176 175.906 230.176 173.324 c[] 0 d 1 j 1 J0.118 w 0 G S230.176 156.029 m230.176 153.447 228.07 151.353 225.471 151.353 c222.872 151.353 220.765 153.447 220.765 156.029 c220.765 158.612 222.872 160.706 225.471 160.706 c228.07 160.706 230.176 158.612 230.176 156.029 c[] 0 d 1 j 1 J0.118 w 0 G S221.529 210.176 m221.529 207.577 219.423 205.471 216.824 205.471 c214.225 205.471 212.118 207.577 212.118 210.176 c212.118 212.775 214.225 214.882 216.824 214.882 c219.423 214.882 221.529 212.775 221.529 210.176 c[] 0 d 1 j 1 J0.118 w 0 G S238.824 210.176 m238.824 207.577 236.717 205.471 234.118 205.471 c231.519 205.471 229.412 207.577 229.412 210.176 c229.412 212.775 231.519 214.882 234.118 214.882 c236.717 214.882 238.824 212.775 238.824 210.176 c[] 0 d 1 j 1 J0.118 w 0 G S200.235 207.853 m200.235 205.27 198.142 203.176 195.559 203.176 c192.976 203.176 190.882 205.27 190.882 207.853 c190.882 210.436 192.976 212.529 195.559 212.529 c198.142 212.529 200.235 210.436 200.235 207.853 c[] 0 d 1 j 1 J0.118 w 0 G S212.882 195.206 m212.882 192.623 210.789 190.529 208.206 190.529 c205.623 190.529 203.529 192.623 203.529 195.206 c203.529 197.789 205.623 199.882 208.206 199.882 c210.789 199.882 212.882 197.789 212.882 195.206 c[] 0 d 1 j 1 J0.118 w 0 G S247.412 195.206 m247.412 192.623 245.318 190.529 242.735 190.529 c240.153 190.529 238.059 192.623 238.059 195.206 c238.059 197.789 240.153 199.882 242.735 199.882 c245.318 199.882 247.412 197.789 247.412 195.206 c[] 0 d 1 j 1 J0.118 w 0 G S260.059 207.853 m260.059 205.27 257.965 203.176 255.382 203.176 c252.8 203.176 250.706 205.27 250.706 207.853 c250.706 210.436 252.8 212.529 255.382 212.529 c257.965 212.529 260.059 210.436 260.059 207.853 c[] 0 d 1 j 1 J0.118 w 0 G S180.882 209.118 m180.882 206.519 178.775 204.412 176.176 204.412 c173.577 204.412 171.471 206.519 171.471 209.118 c171.471 211.717 173.577 213.824 176.176 213.824 c178.775 213.824 180.882 211.717 180.882 209.118 c[] 0 d 1 j 1 J0.118 w 0 G S188.235 194.676 m188.235 192.094 186.142 190 183.559 190 c180.976 190 178.882 192.094 178.882 194.676 c178.882 197.259 180.976 199.353 183.559 199.353 c186.142 199.353 188.235 197.259 188.235 194.676 c[] 0 d 1 j 1 J0.118 w 0 G S199.706 183.206 m199.706 180.623 197.599 178.529 195 178.529 c192.401 178.529 190.294 180.623 190.294 183.206 c190.294 185.789 192.401 187.882 195 187.882 c197.599 187.882 199.706 185.789 199.706 183.206 c[] 0 d 1 j 1 J0.118 w 0 G S214.118 175.853 m214.118 173.27 212.024 171.176 209.441 171.176 c206.858 171.176 204.765 173.27 204.765 175.853 c204.765 178.436 206.858 180.529 209.441 180.529 c212.024 180.529 214.118 178.436 214.118 175.853 c[] 0 d 1 j 1 J0.118 w 0 G S246.176 175.853 m246.176 173.27 244.083 171.176 241.5 171.176 c238.917 171.176 236.824 173.27 236.824 175.853 c236.824 178.436 238.917 180.529 241.5 180.529 c244.083 180.529 246.176 178.436 246.176 175.853 c[] 0 d 1 j 1 J0.118 w 0 G S260.647 183.206 m260.647 180.623 258.54 178.529 255.941 178.529 c253.342 178.529 251.235 180.623 251.235 183.206 c251.235 185.789 253.342 187.882 255.941 187.882 c258.54 187.882 260.647 185.789 260.647 183.206 c[] 0 d 1 j 1 J0.118 w 0 G S272.059 194.676 m272.059 192.094 269.965 190 267.382 190 c264.8 190 262.706 192.094 262.706 194.676 c262.706 197.259 264.8 199.353 267.382 199.353 c269.965 199.353 272.059 197.259 272.059 194.676 c[] 0 d 1 j 1 J0.118 w 0 G S279.471 209.118 m279.471 206.519 277.364 204.412 274.765 204.412 c272.166 204.412 270.059 206.519 270.059 209.118 c270.059 211.717 272.166 213.824 274.765 213.824 c277.364 213.824 279.471 211.717 279.471 209.118 c[] 0 d 1 j 1 J0.118 w 0 G S163.412 207.265 m163.412 204.682 161.318 202.588 158.735 202.588 c156.153 202.588 154.059 204.682 154.059 207.265 c154.059 209.847 156.153 211.941 158.735 211.941 c161.318 211.941 163.412 209.847 163.412 207.265 c[] 0 d 1 j 1 J0.118 w 0 G S170.294 190.588 m170.294 187.989 168.2 185.882 165.618 185.882 c163.035 185.882 160.941 187.989 160.941 190.588 c160.941 193.187 163.035 195.294 165.618 195.294 c168.2 195.294 170.294 193.187 170.294 190.588 c[] 0 d 1 j 1 J0.118 w 0 G S181.294 176.265 m181.294 173.682 179.2 171.588 176.618 171.588 c174.035 171.588 171.941 173.682 171.941 176.265 c171.941 178.847 174.035 180.941 176.618 180.941 c179.2 180.941 181.294 178.847 181.294 176.265 c[] 0 d 1 j 1 J0.118 w 0 G S195.588 165.294 m195.588 162.695 193.495 160.588 190.912 160.588 c188.329 160.588 186.235 162.695 186.235 165.294 c186.235 167.893 188.329 170 190.912 170 c193.495 170 195.588 167.893 195.588 165.294 c[] 0 d 1 j 1 J0.118 w 0 G S212.294 158.382 m212.294 155.8 210.187 153.706 207.588 153.706 c204.989 153.706 202.882 155.8 202.882 158.382 c202.882 160.965 204.989 163.059 207.588 163.059 c210.187 163.059 212.294 160.965 212.294 158.382 c[] 0 d 1 j 1 J0.118 w 0 G S248.059 158.382 m248.059 155.8 245.952 153.706 243.353 153.706 c240.754 153.706 238.647 155.8 238.647 158.382 c238.647 160.965 240.754 163.059 243.353 163.059 c245.952 163.059 248.059 160.965 248.059 158.382 c[] 0 d 1 j 1 J0.118 w 0 G S264.706 165.294 m264.706 162.695 262.612 160.588 260.029 160.588 c257.447 160.588 255.353 162.695 255.353 165.294 c255.353 167.893 257.447 170 260.029 170 c262.612 170 264.706 167.893 264.706 165.294 c[] 0 d 1 j 1 J0.118 w 0 G S279 176.265 m279 173.682 276.906 171.588 274.324 171.588 c271.741 171.588 269.647 173.682 269.647 176.265 c269.647 178.847 271.741 180.941 274.324 180.941 c276.906 180.941 279 178.847 279 176.265 c[] 0 d 1 j 1 J0.118 w 0 G S290 190.588 m290 187.989 287.906 185.882 285.324 185.882 c282.741 185.882 280.647 187.989 280.647 190.588 c280.647 193.187 282.741 195.294 285.324 195.294 c287.906 195.294 290 193.187 290 190.588 c[] 0 d 1 j 1 J0.118 w 0 G S296.882 207.265 m296.882 204.682 294.789 202.588 292.206 202.588 c289.623 202.588 287.529 204.682 287.529 207.265 c287.529 209.847 289.623 211.941 292.206 211.941 c294.789 211.941 296.882 209.847 296.882 207.265 c[] 0 d 1 j 1 J0.118 w 0 G S228 235.059  m228 555.412  l222.941 555.412  l222.941 235.059  l228 235.059  l[] 0 d 1 j 1 J0.118 w 0 G S283.059 334.235 m283.059 296.453 257.276 265.824 225.471 265.824 c193.665 265.824 167.882 296.453 167.882 334.235 c167.882 372.018 193.665 402.647 225.471 402.647 c257.276 402.647 283.059 372.018 283.059 334.235 c[] 0 d 1 j 1 J0.118 w 0 G S155.882 452.647 m155.882 441.699 147.02 432.824 136.088 432.824 c125.156 432.824 116.294 441.699 116.294 452.647 c116.294 463.595 125.156 472.471 136.088 472.471 c147.02 472.471 155.882 463.595 155.882 452.647 c[] 0 d 1 j 1 J0.118 w 0 G S316.529 225.147 m316.529 222.564 314.436 220.471 311.853 220.471 c309.27 220.471 307.176 222.564 307.176 225.147 c307.176 227.73 309.27 229.824 311.853 229.824 c314.436 229.824 316.529 227.73 316.529 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S143.765 225.147 m143.765 222.564 141.671 220.471 139.088 220.471 c136.505 220.471 134.412 222.564 134.412 225.147 c134.412 227.73 136.505 229.824 139.088 229.824 c141.671 229.824 143.765 227.73 143.765 225.147 c[] 0 d 1 j 1 J0.118 w 0 G S230.176 138.765 m230.176 136.166 228.07 134.059 225.471 134.059 c222.872 134.059 220.765 136.166 220.765 138.765 c220.765 141.364 222.872 143.471 225.471 143.471 c228.07 143.471 230.176 141.364 230.176 138.765 c[] 0 d 1 j 1 J0.118 w 0 G S145.412 208.265 m145.412 205.682 143.318 203.588 140.735 203.588 c138.153 203.588 136.059 205.682 136.059 208.265 c136.059 210.847 138.153 212.941 140.735 212.941 c143.318 212.941 145.412 210.847 145.412 208.265 c[] 0 d 1 j 1 J0.118 w 0 G S150.353 192.088 m150.353 189.505 148.259 187.412 145.676 187.412 c143.094 187.412 141 189.505 141 192.088 c141 194.671 143.094 196.765 145.676 196.765 c148.259 196.765 150.353 194.671 150.353 192.088 c[] 0 d 1 j 1 J0.118 w 0 G S158.353 177.147 m158.353 174.564 156.246 172.471 153.647 172.471 c151.048 172.471 148.941 174.564 148.941 177.147 c148.941 179.73 151.048 181.824 153.647 181.824 c156.246 181.824 158.353 179.73 158.353 177.147 c[] 0 d 1 j 1 J0.118 w 0 G S169.059 164.059 m169.059 161.46 166.965 159.353 164.382 159.353 c161.8 159.353 159.706 161.46 159.706 164.059 c159.706 166.658 161.8 168.765 164.382 168.765 c166.965 168.765 169.059 166.658 169.059 164.059 c[] 0 d 1 j 1 J0.118 w 0 G S182.176 153.324 m182.176 150.741 180.083 148.647 177.5 148.647 c174.917 148.647 172.824 150.741 172.824 153.324 c172.824 155.906 174.917 158 177.5 158 c180.083 158 182.176 155.906 182.176 153.324 c[] 0 d 1 j 1 J0.118 w 0 G S197.118 145.324 m197.118 142.741 195.011 140.647 192.412 140.647 c189.813 140.647 187.706 142.741 187.706 145.324 c187.706 147.906 189.813 150 192.412 150 c195.011 150 197.118 147.906 197.118 145.324 c[] 0 d 1 j 1 J0.118 w 0 G S213.294 140.412 m213.294 137.813 211.2 135.706 208.618 135.706 c206.035 135.706 203.941 137.813 203.941 140.412 c203.941 143.011 206.035 145.118 208.618 145.118 c211.2 145.118 213.294 143.011 213.294 140.412 c[] 0 d 1 j 1 J0.118 w 0 G S247 140.412 m247 137.813 244.906 135.706 242.324 135.706 c239.741 135.706 237.647 137.813 237.647 140.412 c237.647 143.011 239.741 145.118 242.324 145.118 c244.906 145.118 247 143.011 247 140.412 c[] 0 d 1 j 1 J0.118 w 0 G S263.235 145.324 m263.235 142.741 261.128 140.647 258.529 140.647 c255.93 140.647 253.824 142.741 253.824 145.324 c253.824 147.906 255.93 150 258.529 150 c261.128 150 263.235 147.906 263.235 145.324 c[] 0 d 1 j 1 J0.118 w 0 G S278.176 153.324 m278.176 150.741 276.07 148.647 273.471 148.647 c270.872 148.647 268.765 150.741 268.765 153.324 c268.765 155.906 270.872 158 273.471 158 c276.07 158 278.176 155.906 278.176 153.324 c[] 0 d 1 j 1 J0.118 w 0 G S291.235 164.059 m291.235 161.46 289.142 159.353 286.559 159.353 c283.976 159.353 281.882 161.46 281.882 164.059 c281.882 166.658 283.976 168.765 286.559 168.765 c289.142 168.765 291.235 166.658 291.235 164.059 c[] 0 d 1 j 1 J0.118 w 0 G S302 177.147 m302 174.564 299.893 172.471 297.294 172.471 c294.695 172.471 292.588 174.564 292.588 177.147 c292.588 179.73 294.695 181.824 297.294 181.824 c299.893 181.824 302 179.73 302 177.147 c[] 0 d 1 j 1 J0.118 w 0 G S309.941 192.088 m309.941 189.505 307.847 187.412 305.265 187.412 c302.682 187.412 300.588 189.505 300.588 192.088 c300.588 194.671 302.682 196.765 305.265 196.765 c307.847 196.765 309.941 194.671 309.941 192.088 c[] 0 d 1 j 1 J0.118 w 0 G S314.882 208.265 m314.882 205.682 312.789 203.588 310.206 203.588 c307.623 203.588 305.529 205.682 305.529 208.265 c305.529 210.847 307.623 212.941 310.206 212.941 c312.789 212.941 314.882 210.847 314.882 208.265 c[] 0 d 1 j 1 J0.118 w 0 G S27.118 23.176  m26.535 23.176 25.956 23.296 25.412 23.529 c24.868 23.763 24.369 24.102 23.941 24.529 c23.514 24.957 23.174 25.456 22.941 26 c22.708 26.544 22.588 27.123 22.588 27.706 c22.588 27.706  L22.588 640.765  L22.588 641.386 22.708 641.985 22.941 642.529 c23.174 643.073 23.514 643.553 23.941 643.941 c24.369 644.369 24.868 644.708 25.412 644.941 c25.956 645.174 26.535 645.294 27.118 645.294 c27.118 645.294  L423.824 645.294  L424.406 645.294 424.985 645.174 425.529 644.941 c426.073 644.708 426.573 644.369 427 643.941 c427.427 643.553 427.767 643.073 428 642.529 c428.233 641.985 428.353 641.386 428.353 640.765 c428.353 640.765  L428.353 27.706  L428.353 27.393 428.314 27.097 428.235 26.824 c428.196 26.55 428.117 26.274 428 26 c427.883 25.726 427.745 25.45 427.588 25.176 c427.432 24.942 427.235 24.725 427 24.529 c426.804 24.334 426.588 24.137 426.353 23.941 c426.079 23.785 425.803 23.647 425.529 23.529 c425.256 23.412 424.98 23.333 424.706 23.294 c424.432 23.216 424.137 23.176 423.824 23.176 c423.824 23.176  L27.118 23.176  L[] 0 d 1 j 1 J0.118 w 0 G S%%TrailerAdobe_Illustrator88 /terminate get execAdobe_pattern /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF