%!PS-Adobe-2.0 EPSF-1.2%%Creator: Vectorworks 2015 SP2 [20.0.2(240846)] (64-Bit app)%%Title: 2pin_mounting_plate.eps%%CreationDate: 1/3/2019%%DocumentProcSets: Adobe_packedarray 1.0 0%%DocumentSuppliedProcSets: Adobe_packedarray 1.0 0%%DocumentProcSets: Adobe_cmykcolor 1.1 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 1.1 0%%DocumentProcSets: Adobe_cshow 1.1 0%%DocumentSuppliedProcSets: Adobe_cshow 1.1 0%%DocumentProcSets: Adobe_customcolor 1.0 0%%DocumentSuppliedProcSets: Adobe_customcolor 1.0 0%%DocumentProcSets: Adobe_pattern 1.9 0%%DocumentSuppliedProcSets: Adobe_pattern 1.9 0%%DocumentProcSets: Adobe_Illustrator88 1.19 0%%DocumentSuppliedProcSets: Adobe_Illustrator88 1.19 0%%BoundingBox:0 0 354 329%%TemplateBox:306 396 306 396%%DocumentPreview: Header%%EndComments%%BeginProlog%%BeginProcSet: Adobe_packedarray 1.0 0userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet: Adobe_cmykcolor 1.1 0currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end end	Adobe_cmykcolor begin	} ifelse} def/terminate{currentdict Adobe_cmykcolor eq	{ end	} if} def/setcmykcolor{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 1.1 0currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 1.0 0currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_pattern 1.9 0currentpacking true setpackinguserdict /Adobe_pattern 14 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern begin	Adobe_pattern		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			break			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll pop pop pop pop pop pop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	pop pop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{pop pop}			{pop pop pop true}			{pop pop pop pop pop pop pop true}			{pop true}			pathforall			} stopped			{			pop pop pop pop pop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		pop pop		}		{		pop pop pop pop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternclipAdobe_pattern /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern /patternfill get exec			} pathforall		pop pop	pop		} stopped			{			pop pop pop pop pop			patternclip			Adobe_pattern /patternfill get exec			} if	}	{	patternclip	Adobe_pattern /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern /patternmatrix get 4 1 roll	} if	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	6 index 6 index 6 index	Adobe_pattern /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator88 1.19 0currentpacking true setpackinguserdict /Adobe_Illustrator88 73 dict dup begin put/initialize{userdict /Adobe_Illustrator88_vars 31 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator88 beginAdobe_Illustrator88 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator88 beginAdobe_Illustrator88_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator88_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/sp{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c{curveto} def/C/c load def/v{currentpoint 6 2 roll curveto} def/V/v load def/y{2 copy curveto} def/Y/y load def/l{lineto} def/L/l load def/m{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse/d{setdash} def/cfcurrentflat def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{newpath} def/n/N load def/F{_pf} def/f{closepathF} def/S{_ps} def/s{closepathS} def/B{gsave F grestoreS} def/b{closepathB} def/W{clip} def/ta{_as moveto_tt aload pop 4 -2 roll} def/tl{_tl aload pop translate} def/as{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm{_tm currentmatrix popconcat} def/I{tm/t	{	ta sp	tl	} ddef} def/o{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e{tm/t	{	ta _psf	tl	newpath	} ddef} def/r{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T{_tm setmatrix} def/Z{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def/u{} def/U{} def/q{gsave} def/Q{grestore} def/`{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			10 copy 6 npop exch pop patternashow			}			{			pop			7 copy 3 npop exch pop ashow			} ifelse		grestore		pop		} for	pop	} forrestore4 npop newpath} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			11 copy 6 npop 3 -1 roll pop patternashowstroke			}			{			pop			8 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestore5 npop newpath} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern /initialize get execAdobe_Illustrator88 /initialize get exec%%EndSetup0 A0 O0 R0 g0 G0 i 0 J 0 j 1 w 4 M [] 0 d53.176 144.353  m135.412 144.353  L[] 0 d 1 j 1 J0.118 w 0 G S57.706 144.324 m57.706 141.838 55.691 139.824 53.206 139.824 c50.721 139.824 48.706 141.838 48.706 144.324 c48.706 146.809 50.721 148.824 53.206 148.824 c55.691 148.824 57.706 146.809 57.706 144.324 c[] 0 d 1 j 1 J0.118 w 0 G S139.941 144.324 m139.941 141.838 137.926 139.824 135.441 139.824 c132.956 139.824 130.941 141.838 130.941 144.324 c130.941 146.809 132.956 148.824 135.441 148.824 c137.926 148.824 139.941 146.809 139.941 144.324 c[] 0 d 1 j 1 J0.118 w 0 G S112.294 128.118  m112.294 160.529  l76.294 160.529  l76.294 128.118  l112.294 128.118  l[] 0 d 1 j 1 J0.118 w 0 G S155.529 117.353  m155.529 171.353  l33.118 171.353  l33.118 117.353  l155.529 117.353  l[] 0 d 1 j 1 J0.118 w 0 G S155.529 161.941  m155.529 164.427 154.535 166.818 152.765 168.588 c152.765 168.588  L150.994 170.358 148.625 171.353 146.176 171.353 c146.176 171.353  L[] 0 d 1 j 1 J0.118 w 0 G S146.176 117.353  m148.625 117.353 150.994 118.326 152.765 120.059 c152.765 120.059  L154.535 121.829 155.529 124.22 155.529 126.706 c155.529 126.706  L[] 0 d 1 j 1 J0.118 w 0 G S33.118 126.706  m33.118 124.22 34.091 121.829 35.824 120.059 c35.824 120.059  L37.594 118.326 39.985 117.353 42.471 117.353 c42.471 117.353  L[] 0 d 1 j 1 J0.118 w 0 G S42.471 171.353  m39.985 171.353 37.594 170.358 35.824 168.588 c35.824 168.588  L34.091 166.818 33.118 164.427 33.118 161.941 c33.118 161.941  L[] 0 d 1 j 1 J0.118 w 0 G S49 46.794 m49 44.309 46.985 42.294 44.5 42.294 c42.015 42.294 40 44.309 40 46.794 c40 49.279 42.015 51.294 44.5 51.294 c46.985 51.294 49 49.279 49 46.794 c[] 0 d 1 j 1 J0.118 w 0 G S131.235 46.794 m131.235 44.309 129.221 42.294 126.735 42.294 c124.25 42.294 122.235 44.309 122.235 46.794 c122.235 49.279 124.25 51.294 126.735 51.294 c129.221 51.294 131.235 49.279 131.235 46.794 c[] 0 d 1 j 1 J0.118 w 0 G S103.588 30.588  m103.588 62.941  l67.588 62.941  l67.588 30.588  l103.588 30.588  l[] 0 d 1 j 1 J0.118 w 0 G S137.412 73.765  m138.654 73.765 139.874 73.525 141 73.059 c142.165 72.593 143.205 71.893 144.059 71 c144.913 70.146 145.593 69.126 146.059 68 c146.564 66.873 146.824 65.655 146.824 64.412 c146.824 64.412  L146.824 29.118  L146.824 27.874 146.564 26.656 146.059 25.529 c145.593 24.404 144.913 23.383 144.059 22.529 c143.205 21.637 142.165 20.936 141 20.471 c139.874 20.005 138.654 19.765 137.412 19.765 c137.412 19.765  L33.765 19.765  L32.523 19.765 31.302 20.005 30.176 20.471 c29.051 20.936 28.01 21.637 27.118 22.529 c26.264 23.383 25.583 24.404 25.118 25.529 c24.652 26.655 24.412 27.875 24.412 29.118 c24.412 29.118  L24.412 64.412  L24.412 65.655 24.651 66.873 25.118 68 c25.584 69.127 26.263 70.145 27.118 71 c28.011 71.894 29.05 72.593 30.176 73.059 c31.303 73.525 32.521 73.765 33.765 73.765 c33.765 73.765  L137.412 73.765  L[] 0 d 1 j 1 J0.118 w 0 G S112.412 263.176  m112.412 297.765  l54.118 297.765  l54.118 263.176  l112.412 263.176  l[] 0 d 1 j 1 J0.118 w 0 G S88.706 280.471 m88.706 270.919 80.963 263.176 71.412 263.176 c61.86 263.176 54.118 270.919 54.118 280.471 c54.118 290.022 61.86 297.765 71.412 297.765 c80.963 297.765 88.706 290.022 88.706 280.471 c[] 0 d 1 j 1 J0.118 w 0 G S112.412 280.471 m112.412 270.919 104.682 263.176 95.147 263.176 c85.612 263.176 77.882 270.919 77.882 280.471 c77.882 290.022 85.612 297.765 95.147 297.765 c104.682 297.765 112.412 290.022 112.412 280.471 c[] 0 d 1 j 1 J0.118 w 0 G S126.471 280.471  m40.059 280.471  L[] 0 d 1 j 1 J0.118 w 0 G S47.294 280.471 m47.294 278.489 45.674 276.882 43.676 276.882 c41.678 276.882 40.059 278.489 40.059 280.471 c40.059 282.452 41.678 284.059 43.676 284.059 c45.674 284.059 47.294 282.452 47.294 280.471 c[] 0 d 1 j 1 J0.118 w 0 G S126.471 280.471 m126.471 278.489 124.864 276.882 122.882 276.882 c120.901 276.882 119.294 278.489 119.294 280.471 c119.294 282.452 120.901 284.059 122.882 284.059 c124.864 284.059 126.471 282.452 126.471 280.471 c[] 0 d 1 j 1 J0.118 w 0 G S42.176 280.471  m124.412 280.471  L[] 0 d 1 j 1 J0.118 w 0 G S46.647 280.5 m46.647 278.015 44.632 276 42.147 276 c39.662 276 37.647 278.015 37.647 280.5 c37.647 282.985 39.662 285 42.147 285 c44.632 285 46.647 282.985 46.647 280.5 c[] 0 d 1 j 1 J0.118 w 0 G S128.882 280.5 m128.882 278.015 126.868 276 124.382 276 c121.897 276 119.882 278.015 119.882 280.5 c119.882 282.985 121.897 285 124.382 285 c126.868 285 128.882 282.985 128.882 280.5 c[] 0 d 1 j 1 J0.118 w 0 G S144.471 253.471  m144.471 307.471  l22.059 307.471  l22.059 253.471  l144.471 253.471  l[] 0 d 1 j 1 J0.118 w 0 G S144.471 298.118  m144.471 300.603 143.476 302.973 141.706 304.706 c141.706 304.706  L139.973 306.476 137.603 307.471 135.118 307.471 c135.118 307.471  L[] 0 d 1 j 1 J0.118 w 0 G S135.118 253.471  m137.603 253.471 139.973 254.465 141.706 256.235 c141.706 256.235  L143.476 257.968 144.471 260.338 144.471 262.824 c144.471 262.824  L[] 0 d 1 j 1 J0.118 w 0 G S22.059 262.824  m22.059 260.338 23.053 257.968 24.824 256.235 c24.824 256.235  L26.594 254.465 28.964 253.471 31.412 253.471 c31.412 253.471  L[] 0 d 1 j 1 J0.118 w 0 G S31.412 307.471  m28.964 307.471 26.594 306.476 24.824 304.706 c24.824 304.706  L23.053 302.973 22.059 300.603 22.059 298.118 c22.059 298.118  L[] 0 d 1 j 1 J0.118 w 0 G S236.412 278.618 m236.412 276.035 234.318 273.941 231.735 273.941 c229.153 273.941 227.059 276.035 227.059 278.618 c227.059 281.2 229.153 283.294 231.735 283.294 c234.318 283.294 236.412 281.2 236.412 278.618 c[] 0 d 1 j 1 J0.118 w 0 G S317.824 278.618 m317.824 276.035 315.717 273.941 313.118 273.941 c310.519 273.941 308.412 276.035 308.412 278.618 c308.412 281.2 310.519 283.294 313.118 283.294 c315.717 283.294 317.824 281.2 317.824 278.618 c[] 0 d 1 j 1 J0.118 w 0 G S284.294 261.353  m260.529 261.353  L258.276 261.353 256.039 261.792 253.941 262.647 c251.843 263.502 249.946 264.78 248.353 266.412 c246.723 268.003 245.442 269.904 244.588 272 c243.733 274.098 243.294 276.335 243.294 278.588 c243.294 280.881 243.733 283.137 244.588 285.235 c245.442 287.331 246.723 289.232 248.353 290.824 c249.946 292.416 251.843 293.695 253.941 294.588 c256.037 295.442 258.278 295.882 260.529 295.882 c260.529 295.882  L284.294 295.882  L286.584 295.882 288.845 295.442 290.941 294.588 c293.039 293.695 294.936 292.416 296.529 290.824 c298.121 289.232 299.401 287.331 300.294 285.235 c301.149 283.137 301.588 280.881 301.588 278.588 c301.588 276.337 301.148 274.096 300.294 272 c299.401 269.904 298.121 268.003 296.529 266.412 c294.936 264.78 293.039 263.502 290.941 262.647 c288.845 261.793 286.584 261.353 284.294 261.353 c284.294 261.353  L[] 0 d 1 j 1 J0.118 w 0 G S324.294 305.588  m325.497 305.588 326.718 305.348 327.882 304.882 c329.008 304.417 330.028 303.736 330.882 302.882 c331.776 301.989 332.475 300.95 332.941 299.824 c333.407 298.697 333.647 297.479 333.647 296.235 c333.647 296.235  L333.647 260.941  L333.647 259.738 333.407 258.537 332.941 257.412 c332.475 256.247 331.775 255.207 330.882 254.353 c330.028 253.498 329.009 252.799 327.882 252.294 c326.718 251.828 325.497 251.588 324.294 251.588 c324.294 251.588  L220.588 251.588  L219.385 251.588 218.165 251.828 217 252.294 c215.873 252.799 214.855 253.498 214 254.353 c213.106 255.208 212.407 256.246 211.941 257.412 c211.475 258.537 211.235 259.738 211.235 260.941 c211.235 260.941  L211.235 296.235  L211.235 297.477 211.475 298.698 211.941 299.824 c212.407 300.95 213.106 301.989 214 302.882 c214.854 303.736 215.874 304.417 217 304.882 c218.166 305.349 219.384 305.588 220.588 305.588 c220.588 305.588  L324.294 305.588  L[] 0 d 1 j 1 J0.118 w 0 G S%%TrailerAdobe_Illustrator88 /terminate get execAdobe_pattern /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF