%!PS-Adobe-2.0 EPSF-1.2%%Creator: Vectorworks 2015 SP2 [20.0.2(240846)] (64-Bit app)%%Title: switch_plate.eps%%CreationDate: 3/2/2021%%DocumentProcSets: Adobe_packedarray 1.0 0%%DocumentSuppliedProcSets: Adobe_packedarray 1.0 0%%DocumentProcSets: Adobe_cmykcolor 1.1 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 1.1 0%%DocumentProcSets: Adobe_cshow 1.1 0%%DocumentSuppliedProcSets: Adobe_cshow 1.1 0%%DocumentProcSets: Adobe_customcolor 1.0 0%%DocumentSuppliedProcSets: Adobe_customcolor 1.0 0%%DocumentProcSets: Adobe_pattern 1.9 0%%DocumentSuppliedProcSets: Adobe_pattern 1.9 0%%DocumentProcSets: Adobe_Illustrator88 1.19 0%%DocumentSuppliedProcSets: Adobe_Illustrator88 1.19 0%%BoundingBox:0 0 251 280%%TemplateBox:306 396 306 396%%DocumentPreview: Header%%EndComments%%BeginProlog%%BeginProcSet: Adobe_packedarray 1.0 0userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet: Adobe_cmykcolor 1.1 0currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end end	Adobe_cmykcolor begin	} ifelse} def/terminate{currentdict Adobe_cmykcolor eq	{ end	} if} def/setcmykcolor{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 1.1 0currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 1.0 0currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_pattern 1.9 0currentpacking true setpackinguserdict /Adobe_pattern 14 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern begin	Adobe_pattern		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			break			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll pop pop pop pop pop pop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	pop pop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{pop pop}			{pop pop pop true}			{pop pop pop pop pop pop pop true}			{pop true}			pathforall			} stopped			{			pop pop pop pop pop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		pop pop		}		{		pop pop pop pop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternclipAdobe_pattern /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern /patternfill get exec			} pathforall		pop pop	pop		} stopped			{			pop pop pop pop pop			patternclip			Adobe_pattern /patternfill get exec			} if	}	{	patternclip	Adobe_pattern /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern /patternmatrix get 4 1 roll	} if	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	6 index 6 index 6 index	Adobe_pattern /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator88 1.19 0currentpacking true setpackinguserdict /Adobe_Illustrator88 73 dict dup begin put/initialize{userdict /Adobe_Illustrator88_vars 31 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator88 beginAdobe_Illustrator88 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator88 beginAdobe_Illustrator88_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator88_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/sp{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c{curveto} def/C/c load def/v{currentpoint 6 2 roll curveto} def/V/v load def/y{2 copy curveto} def/Y/y load def/l{lineto} def/L/l load def/m{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse/d{setdash} def/cfcurrentflat def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{newpath} def/n/N load def/F{_pf} def/f{closepathF} def/S{_ps} def/s{closepathS} def/B{gsave F grestoreS} def/b{closepathB} def/W{clip} def/ta{_as moveto_tt aload pop 4 -2 roll} def/tl{_tl aload pop translate} def/as{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm{_tm currentmatrix popconcat} def/I{tm/t	{	ta sp	tl	} ddef} def/o{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e{tm/t	{	ta _psf	tl	newpath	} ddef} def/r{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T{_tm setmatrix} def/Z{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def/u{} def/U{} def/q{gsave} def/Q{grestore} def/`{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			10 copy 6 npop exch pop patternashow			}			{			pop			7 copy 3 npop exch pop ashow			} ifelse		grestore		pop		} for	pop	} forrestore4 npop newpath} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			11 copy 6 npop 3 -1 roll pop patternashowstroke			}			{			pop			8 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestore5 npop newpath} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern /initialize get execAdobe_Illustrator88 /initialize get exec%%EndSetup0 A0 O0 R0 g0 G0 i 0 J 0 j 1 w 4 M [] 0 d103.647 219.735 m103.647 217.867 102.133 216.353 100.265 216.353 c98.397 216.353 96.882 217.867 96.882 219.735 c96.882 221.603 98.397 223.118 100.265 223.118 c102.133 223.118 103.647 221.603 103.647 219.735 c[] 0 d 1 j 1 J0.118 w 0 G S70.529 60.971 m70.529 59.103 69.015 57.588 67.147 57.588 c65.279 57.588 63.765 59.103 63.765 60.971 c63.765 62.839 65.279 64.353 67.147 64.353 c69.015 64.353 70.529 62.839 70.529 60.971 c[] 0 d 1 j 1 J0.118 w 0 G S187.882 219.735 m187.882 217.867 186.368 216.353 184.5 216.353 c182.632 216.353 181.118 217.867 181.118 219.735 c181.118 221.603 182.632 223.118 184.5 223.118 c186.368 223.118 187.882 221.603 187.882 219.735 c[] 0 d 1 j 1 J0.118 w 0 G S154.765 60.971 m154.765 59.103 153.25 57.588 151.382 57.588 c149.514 57.588 148 59.103 148 60.971 c148 62.839 149.514 64.353 151.382 64.353 c153.25 64.353 154.765 62.839 154.765 60.971 c[] 0 d 1 j 1 J0.118 w 0 G S101.706 140.353  m101.706 107.059  L101.706 106.477 101.586 105.876 101.353 105.294 c101.12 104.751 100.8 104.271 100.412 103.882 c99.985 103.455 99.485 103.115 98.941 102.882 c98.398 102.649 97.798 102.529 97.176 102.529 c97.176 102.529  L70.176 102.529  L69.594 102.529 69.014 102.649 68.471 102.882 c67.927 103.115 67.427 103.455 67 103.882 c66.611 104.271 66.292 104.75 66.059 105.294 c65.826 105.876 65.706 106.477 65.706 107.059 c65.706 107.059  L65.706 173.647  L65.706 174.229 65.826 174.809 66.059 175.353 c66.292 175.897 66.611 176.396 67 176.824 c67.427 177.251 67.927 177.59 68.471 177.824 c69.015 178.018 69.594 178.118 70.176 178.118 c70.176 178.118  L97.176 178.118  L97.798 178.118 98.398 178.018 98.941 177.824 c99.485 177.591 99.985 177.251 100.412 176.824 c100.8 176.397 101.12 175.896 101.353 175.353 c101.586 174.809 101.706 174.229 101.706 173.647 c101.706 173.647  L101.706 140.353  L[] 0 d 1 j 1 J0.118 w 0 G S154.412 102.529  m153.829 102.529 153.25 102.649 152.706 102.882 c152.162 103.115 151.663 103.455 151.235 103.882 c150.847 104.271 150.527 104.75 150.294 105.294 c150.061 105.877 149.941 106.476 149.941 107.059 c149.941 107.059  L149.941 173.647  L149.941 174.23 150.061 174.809 150.294 175.353 c150.527 175.897 150.847 176.396 151.235 176.824 c151.663 177.251 152.162 177.59 152.706 177.824 c153.25 178.018 153.829 178.118 154.412 178.118 c154.412 178.118  L181.412 178.118  L182.033 178.118 182.633 178.018 183.176 177.824 c183.72 177.591 184.22 177.251 184.647 176.824 c185.035 176.397 185.355 175.896 185.588 175.353 c185.821 174.809 185.941 174.229 185.941 173.647 c185.941 173.647  L185.941 107.059  L185.941 106.476 185.821 105.877 185.588 105.294 c185.355 104.75 185.036 104.271 184.647 103.882 c184.22 103.455 183.72 103.115 183.176 102.882 c182.633 102.649 182.033 102.529 181.412 102.529 c181.412 102.529  L154.412 102.529  L[] 0 d 1 j 1 J0.118 w 0 G S101.706 107.059  m101.706 173.647  L101.706 174.23 101.586 174.809 101.353 175.353 c101.12 175.897 100.8 176.396 100.412 176.824 c99.984 177.251 99.485 177.59 98.941 177.824 c98.397 178.018 97.798 178.118 97.176 178.118 c97.176 178.118  L70.176 178.118  L69.594 178.118 69.015 178.018 68.471 177.824 c67.927 177.59 67.427 177.251 67 176.824 c66.611 176.396 66.292 175.897 66.059 175.353 c65.826 174.809 65.706 174.229 65.706 173.647 c65.706 173.647  L65.706 107.059  L65.706 106.477 65.826 105.876 66.059 105.294 c66.292 104.75 66.611 104.271 67 103.882 c67.427 103.455 67.927 103.115 68.471 102.882 c69.014 102.649 69.594 102.529 70.176 102.529 c70.176 102.529  L97.176 102.529  L97.798 102.529 98.398 102.649 98.941 102.882 c99.485 103.115 99.985 103.455 100.412 103.882 c100.8 104.271 101.12 104.751 101.353 105.294 c101.586 105.876 101.706 106.477 101.706 107.059 c101.706 107.059  L[] 0 d 1 j 1 J0.118 w 0 G S154.412 102.529  m181.412 102.529  L182.033 102.529 182.633 102.649 183.176 102.882 c183.72 103.115 184.22 103.455 184.647 103.882 c185.036 104.271 185.355 104.75 185.588 105.294 c185.821 105.877 185.941 106.476 185.941 107.059 c185.941 107.059  L185.941 173.647  L185.941 174.229 185.821 174.809 185.588 175.353 c185.355 175.896 185.035 176.397 184.647 176.824 c184.22 177.251 183.72 177.591 183.176 177.824 c182.633 178.018 182.033 178.118 181.412 178.118 c181.412 178.118  L154.412 178.118  L153.829 178.118 153.25 178.018 152.706 177.824 c152.162 177.591 151.662 177.251 151.235 176.824 c150.847 176.397 150.527 175.896 150.294 175.353 c150.061 174.809 149.941 174.23 149.941 173.647 c149.941 173.647  L149.941 107.059  L149.941 106.476 150.061 105.877 150.294 105.294 c150.527 104.75 150.847 104.271 151.235 103.882 c151.663 103.455 152.162 103.115 152.706 102.882 c153.25 102.649 153.829 102.529 154.412 102.529 c154.412 102.529  L[] 0 d 1 j 1 J0.118 w 0 G S61.176 91.765  m60.594 91.765 60.014 91.865 59.471 92.059 c58.927 92.292 58.427 92.632 58 93.059 c57.611 93.486 57.292 93.985 57.059 94.529 c56.826 95.073 56.706 95.653 56.706 96.235 c56.706 96.235  L56.706 184.471  L56.706 185.053 56.826 185.633 57.059 186.176 c57.292 186.72 57.611 187.22 58 187.647 c58.427 188.036 58.927 188.355 59.471 188.588 c60.015 188.821 60.594 188.941 61.176 188.941 c61.176 188.941  L106.176 188.941  L106.798 188.941 107.397 188.821 107.941 188.588 c108.485 188.355 108.984 188.036 109.412 187.647 c109.8 187.22 110.12 186.72 110.353 186.176 c110.586 185.633 110.706 185.053 110.706 184.471 c110.706 184.471  L110.706 96.235  L110.706 95.653 110.586 95.073 110.353 94.529 c110.12 93.986 109.8 93.486 109.412 93.059 c108.985 92.632 108.485 92.292 107.941 92.059 c107.398 91.865 106.798 91.765 106.176 91.765 c106.176 91.765  L61.176 91.765  L[] 0 d 1 j 1 J0.118 w 0 G S145.412 91.765  m144.829 91.765 144.249 91.865 143.706 92.059 c143.162 92.292 142.662 92.632 142.235 93.059 c141.847 93.486 141.527 93.986 141.294 94.529 c141.061 95.073 140.941 95.653 140.941 96.235 c140.941 96.235  L140.941 184.471  L140.941 185.053 141.061 185.633 141.294 186.176 c141.527 186.72 141.847 187.22 142.235 187.647 c142.662 188.035 143.162 188.355 143.706 188.588 c144.25 188.821 144.829 188.941 145.412 188.941 c145.412 188.941  L190.412 188.941  L191.033 188.941 191.633 188.821 192.176 188.588 c192.72 188.355 193.22 188.035 193.647 187.647 c194.036 187.22 194.355 186.72 194.588 186.176 c194.821 185.633 194.941 185.053 194.941 184.471 c194.941 184.471  L194.941 96.235  L194.941 95.653 194.821 95.073 194.588 94.529 c194.355 93.986 194.035 93.486 193.647 93.059 c193.22 92.632 192.72 92.292 192.176 92.059 c191.633 91.865 191.033 91.765 190.412 91.765 c190.412 91.765  L145.412 91.765  L[] 0 d 1 j 1 J0.118 w 0 G S99.882 107.059  m99.882 173.647  L99.882 173.997 99.822 174.356 99.706 174.706 c99.55 175.017 99.351 175.296 99.118 175.529 c98.846 175.801 98.546 176.001 98.235 176.118 c97.924 176.273 97.565 176.353 97.176 176.353 c97.176 176.353  L70.176 176.353  L69.827 176.353 69.487 176.273 69.176 176.118 c68.827 176.001 68.527 175.801 68.294 175.529 c68.061 175.296 67.861 175.017 67.706 174.706 c67.589 174.356 67.529 173.997 67.529 173.647 c67.529 173.647  L67.529 107.059  L67.529 106.709 67.589 106.35 67.706 106 c67.861 105.689 68.061 105.39 68.294 105.118 c68.527 104.885 68.827 104.685 69.176 104.529 c69.487 104.413 69.827 104.353 70.176 104.353 c70.176 104.353  L97.176 104.353  L97.565 104.353 97.924 104.413 98.235 104.529 c98.546 104.685 98.846 104.885 99.118 105.118 c99.351 105.39 99.55 105.689 99.706 106 c99.822 106.35 99.882 106.709 99.882 107.059 c99.882 107.059  L[] 0 d 1 j 1 J0.118 w 0 G S154.412 104.353  m181.412 104.353  L181.8 104.353 182.16 104.413 182.471 104.529 c182.781 104.685 183.081 104.885 183.353 105.118 c183.586 105.389 183.786 105.689 183.941 106 c184.058 106.349 184.118 106.709 184.118 107.059 c184.118 107.059  L184.118 173.647  L184.118 173.804 184.118 173.981 184.118 174.176 c184.079 174.333 184.019 174.51 183.941 174.706 c183.863 174.862 183.784 175 183.706 175.118 c183.589 175.274 183.47 175.412 183.353 175.529 c183.236 175.686 183.098 175.804 182.941 175.882 c182.785 176 182.627 176.079 182.471 176.118 c182.314 176.196 182.137 176.255 181.941 176.294 c181.785 176.333 181.607 176.353 181.412 176.353 c181.412 176.353  L154.412 176.353  L154.255 176.353 154.098 176.333 153.941 176.294 c153.746 176.255 153.568 176.196 153.412 176.118 c153.255 176.079 153.098 176 152.941 175.882 c152.785 175.804 152.647 175.686 152.529 175.529 c152.412 175.412 152.294 175.274 152.176 175.118 c152.098 175 152.019 174.862 151.941 174.706 c151.863 174.51 151.804 174.333 151.765 174.176 c151.765 173.981 151.765 173.804 151.765 173.647 c151.765 173.647  L151.765 107.059  L151.765 106.709 151.825 106.349 151.941 106 c152.096 105.689 152.297 105.389 152.529 105.118 c152.762 104.885 153.062 104.685 153.412 104.529 c153.722 104.413 154.062 104.353 154.412 104.353 c154.412 104.353  L[] 0 d 1 j 1 J0.118 w 0 G S47.294 41.353 m47.294 38.007 44.581 35.294 41.235 35.294 c37.889 35.294 35.176 38.007 35.176 41.353 c35.176 44.699 37.889 47.412 41.235 47.412 c44.581 47.412 47.294 44.699 47.294 41.353 c[] 0 d 1 j 1 J0.118 w 0 G S216.471 41.353 m216.471 38.007 213.758 35.294 210.412 35.294 c207.066 35.294 204.353 38.007 204.353 41.353 c204.353 44.699 207.066 47.412 210.412 47.412 c213.758 47.412 216.471 44.699 216.471 41.353 c[] 0 d 1 j 1 J0.118 w 0 G S216.471 239.353 m216.471 236.007 213.758 233.294 210.412 233.294 c207.066 233.294 204.353 236.007 204.353 239.353 c204.353 242.699 207.066 245.412 210.412 245.412 c213.758 245.412 216.471 242.699 216.471 239.353 c[] 0 d 1 j 1 J0.118 w 0 G S47.294 239.353 m47.294 236.007 44.581 233.294 41.235 233.294 c37.889 233.294 35.176 236.007 35.176 239.353 c35.176 242.699 37.889 245.412 41.235 245.412 c44.581 245.412 47.294 242.699 47.294 239.353 c[] 0 d 1 j 1 J0.118 w 0 G S23.235 41.353  m23.235 38.985 23.695 36.644 24.588 34.471 c25.481 32.297 26.801 30.296 28.471 28.588 c30.14 26.919 32.14 25.599 34.353 24.706 c36.527 23.813 38.867 23.353 41.235 23.353 c41.235 23.353  L210.412 23.353  L212.78 23.353 215.12 23.813 217.294 24.706 c219.468 25.599 221.468 26.919 223.176 28.588 c224.846 30.296 226.166 32.297 227.059 34.471 c227.952 36.644 228.412 38.985 228.412 41.353 c228.412 41.353  L228.412 239.353  L228.412 241.721 227.952 244.061 227.059 246.235 c226.166 248.409 224.846 250.39 223.176 252.059 c221.468 253.728 219.468 255.068 217.294 256 c215.12 256.893 212.78 257.353 210.412 257.353 c210.412 257.353  L41.235 257.353  L38.865 257.353 36.529 256.894 34.353 256 c32.138 255.068 30.141 253.729 28.471 252.059 c26.801 250.39 25.481 248.409 24.588 246.235 c23.695 244.06 23.235 241.723 23.235 239.353 c23.235 239.353  L23.235 41.353  L[] 0 d 1 j 1 J0.118 w 0 G S%%TrailerAdobe_Illustrator88 /terminate get execAdobe_pattern /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF