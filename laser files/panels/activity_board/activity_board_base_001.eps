%!PS-Adobe-2.0 EPSF-1.2%%Creator: Vectorworks 2015 SP2 [20.0.2(240846)] (64-Bit app)%%Title: activity_board_base_001.eps%%CreationDate: 3/2/2021%%DocumentProcSets: Adobe_packedarray 1.0 0%%DocumentSuppliedProcSets: Adobe_packedarray 1.0 0%%DocumentProcSets: Adobe_cmykcolor 1.1 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 1.1 0%%DocumentProcSets: Adobe_cshow 1.1 0%%DocumentSuppliedProcSets: Adobe_cshow 1.1 0%%DocumentProcSets: Adobe_customcolor 1.0 0%%DocumentSuppliedProcSets: Adobe_customcolor 1.0 0%%DocumentProcSets: Adobe_pattern 1.9 0%%DocumentSuppliedProcSets: Adobe_pattern 1.9 0%%DocumentProcSets: Adobe_Illustrator88 1.19 0%%DocumentSuppliedProcSets: Adobe_Illustrator88 1.19 0%%BoundingBox:0 0 894 796%%TemplateBox:306 396 306 396%%DocumentPreview: Header%%EndComments%%BeginProlog%%BeginProcSet: Adobe_packedarray 1.0 0userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet: Adobe_cmykcolor 1.1 0currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end end	Adobe_cmykcolor begin	} ifelse} def/terminate{currentdict Adobe_cmykcolor eq	{ end	} if} def/setcmykcolor{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 1.1 0currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 1.0 0currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_pattern 1.9 0currentpacking true setpackinguserdict /Adobe_pattern 14 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern begin	Adobe_pattern		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			break			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll pop pop pop pop pop pop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	pop pop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{pop pop}			{pop pop pop true}			{pop pop pop pop pop pop pop true}			{pop true}			pathforall			} stopped			{			pop pop pop pop pop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		pop pop		}		{		pop pop pop pop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternclipAdobe_pattern /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern /patternfill get exec			} pathforall		pop pop	pop		} stopped			{			pop pop pop pop pop			patternclip			Adobe_pattern /patternfill get exec			} if	}	{	patternclip	Adobe_pattern /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern /patternmatrix get 4 1 roll	} if	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	6 index 6 index 6 index	Adobe_pattern /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator88 1.19 0currentpacking true setpackinguserdict /Adobe_Illustrator88 73 dict dup begin put/initialize{userdict /Adobe_Illustrator88_vars 31 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator88 beginAdobe_Illustrator88 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator88 beginAdobe_Illustrator88_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator88_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/sp{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c{curveto} def/C/c load def/v{currentpoint 6 2 roll curveto} def/V/v load def/y{2 copy curveto} def/Y/y load def/l{lineto} def/L/l load def/m{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse/d{setdash} def/cfcurrentflat def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{newpath} def/n/N load def/F{_pf} def/f{closepathF} def/S{_ps} def/s{closepathS} def/B{gsave F grestoreS} def/b{closepathB} def/W{clip} def/ta{_as moveto_tt aload pop 4 -2 roll} def/tl{_tl aload pop translate} def/as{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm{_tm currentmatrix popconcat} def/I{tm/t	{	ta sp	tl	} ddef} def/o{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e{tm/t	{	ta _psf	tl	newpath	} ddef} def/r{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T{_tm setmatrix} def/Z{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def/u{} def/U{} def/q{gsave} def/Q{grestore} def/`{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			10 copy 6 npop exch pop patternashow			}			{			pop			7 copy 3 npop exch pop ashow			} ifelse		grestore		pop		} for	pop	} forrestore4 npop newpath} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			11 copy 6 npop 3 -1 roll pop patternashowstroke			}			{			pop			8 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestore5 npop newpath} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern /initialize get execAdobe_Illustrator88 /initialize get exec%%EndSetup0 A0 O0 R0 g0 G0 i 0 J 0 j 1 w 4 M [] 0 d640.294 704.029 m640.294 699.692 636.765 696.176 632.412 696.176 c628.058 696.176 624.529 699.692 624.529 704.029 c624.529 708.366 628.058 711.882 632.412 711.882 c636.765 711.882 640.294 708.366 640.294 704.029 c[] 0 d 1 j 1 J0.118 w 0 G S809.471 704.029 m809.471 699.692 805.955 696.176 801.618 696.176 c797.281 696.176 793.765 699.692 793.765 704.029 c793.765 708.366 797.281 711.882 801.618 711.882 c805.955 711.882 809.471 708.366 809.471 704.029 c[] 0 d 1 j 1 J0.118 w 0 G S809.471 506.029 m809.471 501.692 805.955 498.176 801.618 498.176 c797.281 498.176 793.765 501.692 793.765 506.029 c793.765 510.366 797.281 513.882 801.618 513.882 c805.955 513.882 809.471 510.366 809.471 506.029 c[] 0 d 1 j 1 J0.118 w 0 G S640.294 506.029 m640.294 501.692 636.765 498.176 632.412 498.176 c628.058 498.176 624.529 501.692 624.529 506.029 c624.529 510.366 628.058 513.882 632.412 513.882 c636.765 513.882 640.294 510.366 640.294 506.029 c[] 0 d 1 j 1 J0.118 w 0 G S809.471 92.029 m809.471 87.692 805.955 84.176 801.618 84.176 c797.281 84.176 793.765 87.692 793.765 92.029 c793.765 96.366 797.281 99.882 801.618 99.882 c805.955 99.882 809.471 96.366 809.471 92.029 c[] 0 d 1 j 1 J0.118 w 0 G S640.294 416.029 m640.294 411.692 636.765 408.176 632.412 408.176 c628.058 408.176 624.529 411.692 624.529 416.029 c624.529 420.366 628.058 423.882 632.412 423.882 c636.765 423.882 640.294 420.366 640.294 416.029 c[] 0 d 1 j 1 J0.118 w 0 G S809.471 416.029 m809.471 411.692 805.955 408.176 801.618 408.176 c797.281 408.176 793.765 411.692 793.765 416.029 c793.765 420.366 797.281 423.882 801.618 423.882 c805.955 423.882 809.471 420.366 809.471 416.029 c[] 0 d 1 j 1 J0.118 w 0 G S640.294 92.029 m640.294 87.692 636.765 84.176 632.412 84.176 c628.058 84.176 624.529 87.692 624.529 92.029 c624.529 96.366 628.058 99.882 632.412 99.882 c636.765 99.882 640.294 96.366 640.294 92.029 c[] 0 d 1 j 1 J0.118 w 0 G S550.294 92.029 m550.294 87.692 546.765 84.176 542.412 84.176 c538.058 84.176 534.529 87.692 534.529 92.029 c534.529 96.366 538.058 99.882 542.412 99.882 c546.765 99.882 550.294 96.366 550.294 92.029 c[] 0 d 1 j 1 J0.118 w 0 G S100.294 704.029 m100.294 699.692 96.765 696.176 92.412 696.176 c88.058 696.176 84.529 699.692 84.529 704.029 c84.529 708.366 88.058 711.882 92.412 711.882 c96.765 711.882 100.294 708.366 100.294 704.029 c[] 0 d 1 j 1 J0.118 w 0 G S550.294 704.029 m550.294 699.692 546.765 696.176 542.412 696.176 c538.058 696.176 534.529 699.692 534.529 704.029 c534.529 708.366 538.058 711.882 542.412 711.882 c546.765 711.882 550.294 708.366 550.294 704.029 c[] 0 d 1 j 1 J0.118 w 0 G S100.294 92.029 m100.294 87.692 96.765 84.176 92.412 84.176 c88.058 84.176 84.529 87.692 84.529 92.029 c84.529 96.366 88.058 99.882 92.412 99.882 c96.765 99.882 100.294 96.366 100.294 92.029 c[] 0 d 1 j 1 J0.118 w 0 G S100.294 395.5 m100.294 391.163 96.765 387.647 92.412 387.647 c88.058 387.647 84.529 391.163 84.529 395.5 c84.529 399.837 88.058 403.353 92.412 403.353 c96.765 403.353 100.294 399.837 100.294 395.5 c[] 0 d 1 j 1 J0.118 w 0 G S550.294 395.941 m550.294 391.588 546.765 388.059 542.412 388.059 c538.058 388.059 534.529 391.588 534.529 395.941 c534.529 400.294 538.058 403.824 542.412 403.824 c546.765 403.824 550.294 400.294 550.294 395.941 c[] 0 d 1 j 1 J0.118 w 0 G S650.412 380  m650.412 128  L650.412 125.669 650.871 123.332 651.765 121.118 c652.696 118.944 654.037 116.963 655.706 115.294 c657.375 113.625 659.356 112.305 661.529 111.412 c663.703 110.48 666.044 110 668.412 110 c668.412 110  L765.647 110  L767.976 110 770.317 110.48 772.529 111.412 c774.703 112.305 776.684 113.625 778.353 115.294 c780.024 116.965 781.342 118.942 782.235 121.118 c783.168 123.332 783.647 125.669 783.647 128 c783.647 128  L783.647 380  L783.647 382.37 783.168 384.727 782.235 386.941 c781.342 389.115 780.022 391.096 778.353 392.765 c776.682 394.435 774.705 395.753 772.529 396.647 c770.317 397.54 767.976 398 765.647 398 c765.647 398  L668.412 398  L666.044 398 663.703 397.54 661.529 396.647 c659.356 395.754 657.375 394.434 655.706 392.765 c654.037 391.096 652.696 389.115 651.765 386.941 c650.872 384.729 650.412 382.368 650.412 380 c650.412 380  L[] 0 d 1 j 1 J0.118 w 0 G S20.412 758  m20.412 760.37 20.871 762.727 21.765 764.941 c22.697 767.117 24.035 769.094 25.706 770.765 c27.377 772.435 29.354 773.753 31.529 774.647 c33.703 775.54 36.044 776 38.412 776 c38.412 776  L855.647 776  L856.821 776 857.983 775.902 859.118 775.706 c860.291 775.471 861.434 775.117 862.529 774.647 c863.586 774.217 864.63 773.665 865.647 773 c866.625 772.335 867.531 771.586 868.353 770.765 c869.175 769.943 869.923 769.017 870.588 768 c871.253 767.022 871.805 765.998 872.235 764.941 c872.705 763.846 873.059 762.703 873.294 761.529 c873.529 760.395 873.647 759.213 873.647 758 c873.647 758  L873.647 38  L873.647 36.826 873.529 35.664 873.294 34.529 c873.059 33.356 872.705 32.213 872.235 31.118 c871.805 30.061 871.253 29.017 870.588 28 c869.923 27.022 869.175 26.116 868.353 25.294 c867.531 24.472 866.625 23.724 865.647 23.059 c864.63 22.394 863.586 21.842 862.529 21.412 c861.434 20.942 860.291 20.588 859.118 20.353 c857.983 20.118 856.821 20 855.647 20 c855.647 20  L38.412 20  L36.044 20 33.703 20.48 31.529 21.412 c29.356 22.305 27.375 23.625 25.706 25.294 c24.037 26.963 22.696 28.944 21.765 31.118 c20.872 33.33 20.412 35.671 20.412 38 c20.412 38  L20.412 758  L[] 0 d 1 j 1 J0.118 w 0 G S524.412 128  m524.412 372.118  L524.412 372.666 524.372 373.217 524.294 373.765 c524.177 374.274 524.019 374.785 523.824 375.294 c523.628 375.803 523.392 376.295 523.118 376.765 c522.844 377.234 522.529 377.667 522.176 378.059 c522.176 378.059  L519.999 380.509 518.304 383.34 517.176 386.412 c516.01 389.445 515.412 392.675 515.412 395.941 c515.412 399.207 516.01 402.438 517.176 405.471 c518.304 408.542 519.999 411.374 522.176 413.824 c522.176 413.824  L522.529 414.215 522.844 414.648 523.118 415.118 c523.392 415.587 523.628 416.079 523.824 416.588 c524.019 417.097 524.177 417.609 524.294 418.118 c524.372 418.666 524.412 419.217 524.412 419.765 c524.412 419.765  L524.412 668  L524.412 670.368 523.952 672.729 523.059 674.941 c522.166 677.115 520.826 679.096 519.118 680.765 c517.447 682.435 515.47 683.753 513.294 684.647 c511.12 685.54 508.78 686 506.412 686 c506.412 686  L128.412 686  L126.042 686 123.705 685.541 121.529 684.647 c119.354 683.753 117.377 682.435 115.706 680.765 c114.035 679.094 112.697 677.117 111.765 674.941 c110.871 672.727 110.412 670.37 110.412 668 c110.412 668  L110.412 419.294  L110.412 418.785 110.471 418.254 110.588 417.706 c110.667 417.158 110.804 416.626 111 416.118 c111.196 415.609 111.432 415.117 111.706 414.647 c111.98 414.217 112.295 413.783 112.647 413.353 c112.647 413.353  L114.825 410.903 116.519 408.092 117.647 405.059 c118.814 401.987 119.412 398.757 119.412 395.529 c119.412 392.263 118.814 389.013 117.647 385.941 c116.519 382.908 114.825 380.097 112.647 377.647 c112.647 377.647  L112.295 377.256 111.98 376.823 111.706 376.353 c111.432 375.883 111.196 375.391 111 374.882 c110.804 374.374 110.667 373.842 110.588 373.294 c110.471 372.785 110.412 372.254 110.412 371.706 c110.412 371.706  L110.412 128  L110.412 125.671 110.872 123.33 111.765 121.118 c112.696 118.944 114.037 116.963 115.706 115.294 c117.375 113.625 119.356 112.305 121.529 111.412 c123.703 110.48 126.044 110 128.412 110 c128.412 110  L506.412 110  L508.782 110 511.118 110.479 513.294 111.412 c515.47 112.305 517.447 113.623 519.118 115.294 c520.827 116.965 522.165 118.942 523.059 121.118 c523.952 123.332 524.412 125.669 524.412 128 c524.412 128  L[] 0 d 1 j 1 J0.118 w 0 G S846.765 743.765 m846.765 740.776 844.342 738.353 841.353 738.353 c838.364 738.353 835.941 740.776 835.941 743.765 c835.941 746.754 838.364 749.176 841.353 749.176 c844.342 749.176 846.765 746.754 846.765 743.765 c[] 0 d 1 j 1 J0.118 w 0 G S58.118 743.765 m58.118 740.776 55.695 738.353 52.706 738.353 c49.717 738.353 47.294 740.776 47.294 743.765 c47.294 746.754 49.717 749.176 52.706 749.176 c55.695 749.176 58.118 746.754 58.118 743.765 c[] 0 d 1 j 1 J0.118 w 0 G S58.118 52.294 m58.118 49.305 55.695 46.882 52.706 46.882 c49.717 46.882 47.294 49.305 47.294 52.294 c47.294 55.283 49.717 57.706 52.706 57.706 c55.695 57.706 58.118 55.283 58.118 52.294 c[] 0 d 1 j 1 J0.118 w 0 G S846.765 52.294 m846.765 49.305 844.342 46.882 841.353 46.882 c838.364 46.882 835.941 49.305 835.941 52.294 c835.941 55.283 838.364 57.706 841.353 57.706 c844.342 57.706 846.765 55.283 846.765 52.294 c[] 0 d 1 j 1 J0.118 w 0 G S667.294 506  m766.765 506  L767.738 506 768.712 506.179 769.647 506.529 c770.621 506.841 771.515 507.318 772.294 507.941 c773.073 508.525 773.749 509.241 774.294 510.059 c774.839 510.916 775.237 511.83 775.471 512.765 c775.471 512.765  L776.056 515.108 776.966 517.342 778.176 519.412 c779.348 521.52 780.811 523.439 782.529 525.118 c784.208 526.836 786.127 528.299 788.235 529.471 c790.305 530.681 792.54 531.591 794.882 532.176 c794.882 532.176  L795.817 532.41 796.731 532.808 797.588 533.353 c798.406 533.898 799.122 534.574 799.706 535.353 c800.329 536.132 800.806 537.026 801.118 538 c801.468 538.935 801.647 539.909 801.647 540.882 c801.647 540.882  L801.647 669.176  L801.647 670.15 801.468 671.124 801.118 672.059 c800.806 672.994 800.329 673.888 799.706 674.706 c799.122 675.485 798.406 676.161 797.588 676.706 c796.731 677.251 795.817 677.649 794.882 677.882 c794.882 677.882  L792.54 678.468 790.305 679.378 788.235 680.588 c786.127 681.76 784.208 683.223 782.529 684.941 c780.811 686.62 779.348 688.539 778.176 690.647 c776.966 692.717 776.056 694.951 775.471 697.294 c775.471 697.294  L775.237 698.229 774.839 699.143 774.294 700 c773.749 700.818 773.073 701.533 772.294 702.118 c771.515 702.741 770.621 703.218 769.647 703.529 c768.712 703.841 767.738 704 766.765 704 c766.765 704  L667.294 704  L666.282 704 665.288 703.841 664.353 703.529 c663.418 703.218 662.544 702.741 661.765 702.118 c660.986 701.533 660.31 700.818 659.765 700 c659.219 699.143 658.822 698.229 658.588 697.294 c658.588 697.294  L657.963 694.951 657.054 692.717 655.882 690.647 c654.672 688.539 653.208 686.62 651.529 684.941 c649.811 683.223 647.893 681.76 645.824 680.588 c643.715 679.378 641.48 678.468 639.176 677.882 c639.176 677.882  L638.203 677.649 637.288 677.251 636.471 676.706 c635.653 676.161 634.917 675.485 634.294 674.706 c633.71 673.888 633.233 672.994 632.882 672.059 c632.571 671.124 632.412 670.15 632.412 669.176 c632.412 669.176  L632.412 540.882  L632.412 539.909 632.571 538.935 632.882 538 c633.233 537.026 633.71 536.132 634.294 535.353 c634.917 534.574 635.653 533.898 636.471 533.353 c637.288 532.808 638.203 532.41 639.176 532.176 c639.176 532.176  L641.48 531.591 643.715 530.681 645.824 529.471 c647.893 528.299 649.811 526.836 651.529 525.118 c653.208 523.439 654.672 521.52 655.882 519.412 c657.054 517.342 657.963 515.108 658.588 512.765 c658.588 512.765  L658.822 511.83 659.219 510.916 659.765 510.059 c660.31 509.241 660.986 508.525 661.765 507.941 c662.544 507.318 663.418 506.841 664.353 506.529 c665.288 506.179 666.282 506 667.294 506 c667.294 506  L[] 0 d 1 j 1 J0.118 w 0 G S%%TrailerAdobe_Illustrator88 /terminate get execAdobe_pattern /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF