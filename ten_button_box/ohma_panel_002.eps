%!PS-Adobe-2.0 EPSF-1.2%%Creator: Vectorworks 2015 SP2 [20.0.2(240846)] (64-Bit app)%%Title: ohma_panel_002.eps%%CreationDate: 12/11/2020%%DocumentProcSets: Adobe_packedarray 1.0 0%%DocumentSuppliedProcSets: Adobe_packedarray 1.0 0%%DocumentProcSets: Adobe_cmykcolor 1.1 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 1.1 0%%DocumentProcSets: Adobe_cshow 1.1 0%%DocumentSuppliedProcSets: Adobe_cshow 1.1 0%%DocumentProcSets: Adobe_customcolor 1.0 0%%DocumentSuppliedProcSets: Adobe_customcolor 1.0 0%%DocumentProcSets: Adobe_pattern 1.9 0%%DocumentSuppliedProcSets: Adobe_pattern 1.9 0%%DocumentProcSets: Adobe_Illustrator88 1.19 0%%DocumentSuppliedProcSets: Adobe_Illustrator88 1.19 0%%BoundingBox:0 0 197 283%%TemplateBox:306 396 306 396%%DocumentPreview: Header%%EndComments%%BeginProlog%%BeginProcSet: Adobe_packedarray 1.0 0userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet: Adobe_cmykcolor 1.1 0currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end end	Adobe_cmykcolor begin	} ifelse} def/terminate{currentdict Adobe_cmykcolor eq	{ end	} if} def/setcmykcolor{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 1.1 0currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 1.0 0currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_pattern 1.9 0currentpacking true setpackinguserdict /Adobe_pattern 14 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern begin	Adobe_pattern		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			break			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll pop pop pop pop pop pop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	pop pop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{pop pop}			{pop pop pop true}			{pop pop pop pop pop pop pop true}			{pop true}			pathforall			} stopped			{			pop pop pop pop pop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		pop pop		}		{		pop pop pop pop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternclipAdobe_pattern /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern /patternfill get exec			} pathforall		pop pop	pop		} stopped			{			pop pop pop pop pop			patternclip			Adobe_pattern /patternfill get exec			} if	}	{	patternclip	Adobe_pattern /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern /patternmatrix get 4 1 roll	} if	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	6 index 6 index 6 index	Adobe_pattern /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator88 1.19 0currentpacking true setpackinguserdict /Adobe_Illustrator88 73 dict dup begin put/initialize{userdict /Adobe_Illustrator88_vars 31 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator88 beginAdobe_Illustrator88 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator88 beginAdobe_Illustrator88_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator88_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/sp{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c{curveto} def/C/c load def/v{currentpoint 6 2 roll curveto} def/V/v load def/y{2 copy curveto} def/Y/y load def/l{lineto} def/L/l load def/m{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse/d{setdash} def/cfcurrentflat def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{newpath} def/n/N load def/F{_pf} def/f{closepathF} def/S{_ps} def/s{closepathS} def/B{gsave F grestoreS} def/b{closepathB} def/W{clip} def/ta{_as moveto_tt aload pop 4 -2 roll} def/tl{_tl aload pop translate} def/as{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm{_tm currentmatrix popconcat} def/I{tm/t	{	ta sp	tl	} ddef} def/o{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e{tm/t	{	ta _psf	tl	newpath	} ddef} def/r{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T{_tm setmatrix} def/Z{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def/u{} def/U{} def/q{gsave} def/Q{grestore} def/`{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			10 copy 6 npop exch pop patternashow			}			{			pop			7 copy 3 npop exch pop ashow			} ifelse		grestore		pop		} for	pop	} forrestore4 npop newpath} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			11 copy 6 npop 3 -1 roll pop patternashowstroke			}			{			pop			8 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestore5 npop newpath} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern /initialize get execAdobe_Illustrator88 /initialize get exec%%EndSetup0 A0 O0 R0 g0 G0 i 0 J 0 j 1 w 4 M [] 0 d23.294 251.235  m23.294 32.353  L23.294 31.149 23.514 29.97 23.941 28.882 c24.407 27.794 25.086 26.816 25.941 26 c26.756 25.146 27.737 24.466 28.824 24 c29.91 23.573 31.091 23.353 32.294 23.353 c32.294 23.353  L164.765 23.353  L165.93 23.353 167.089 23.573 168.176 24 c169.302 24.466 170.302 25.146 171.118 26 c171.972 26.815 172.632 27.795 173.059 28.882 c173.525 29.97 173.765 31.149 173.765 32.353 c173.765 32.353  L173.765 251.235  L173.765 252.401 173.525 253.559 173.059 254.647 c172.631 255.735 171.972 256.733 171.118 257.588 c170.302 258.404 169.303 259.063 168.176 259.529 c167.089 259.996 165.93 260.235 164.765 260.235 c164.765 260.235  L32.294 260.235  L31.09 260.235 29.911 259.996 28.824 259.529 c27.736 259.063 26.757 258.404 25.941 257.588 c25.086 256.733 24.407 255.735 23.941 254.647 c23.514 253.56 23.294 252.4 23.294 251.235 c23.294 251.235  L[] 0 d 1 j 1 J0.118 w 0 G S32.294 36.647  m32.294 37.23 32.394 37.789 32.588 38.294 c32.821 38.838 33.141 39.318 33.529 39.706 c33.956 40.133 34.437 40.453 34.941 40.647 c35.485 40.88 36.045 41 36.588 41 c37.171 41 37.731 40.88 38.235 40.647 c38.779 40.453 39.259 40.133 39.647 39.706 c40.035 39.318 40.355 38.838 40.588 38.294 c40.821 37.789 40.941 37.23 40.941 36.647 c40.941 36.647  L40.941 36.103 40.821 35.544 40.588 35 c40.355 34.495 40.035 34.015 39.647 33.588 c39.259 33.2 38.779 32.88 38.235 32.647 c37.731 32.453 37.171 32.353 36.588 32.353 c36.044 32.353 35.485 32.453 34.941 32.647 c34.436 32.88 33.957 33.2 33.529 33.588 c33.141 34.015 32.821 34.495 32.588 35 c32.394 35.544 32.294 36.103 32.294 36.647 c32.294 36.647  L[] 0 d 1 j 1 J0.118 w 0 G S156.118 36.647  m156.118 37.23 156.237 37.789 156.471 38.294 c156.665 38.838 156.985 39.318 157.412 39.706 c157.8 40.133 158.26 40.453 158.765 40.647 c159.308 40.88 159.868 41 160.412 41 c160.994 41 161.574 40.88 162.118 40.647 c162.622 40.453 163.082 40.133 163.471 39.706 c163.898 39.318 164.218 38.838 164.412 38.294 c164.645 37.789 164.765 37.23 164.765 36.647 c164.765 36.647  L164.765 36.103 164.645 35.544 164.412 35 c164.218 34.495 163.898 34.015 163.471 33.588 c163.082 33.2 162.622 32.88 162.118 32.647 c161.574 32.453 160.994 32.353 160.412 32.353 c159.868 32.353 159.308 32.453 158.765 32.647 c158.26 32.88 157.8 33.2 157.412 33.588 c156.985 34.015 156.665 34.495 156.471 35 c156.237 35.544 156.118 36.103 156.118 36.647 c156.118 36.647  L[] 0 d 1 j 1 J0.118 w 0 G S80.882 204.765  m80.882 207.094 81.342 209.394 82.235 211.529 c83.128 213.664 84.428 215.605 86.059 217.235 c87.689 218.904 89.63 220.205 91.765 221.059 c93.902 221.952 96.198 222.412 98.529 222.412 c100.858 222.412 103.159 221.952 105.294 221.059 c107.429 220.205 109.37 218.904 111 217.235 c112.632 215.604 113.93 213.666 114.824 211.529 c115.716 209.394 116.176 207.094 116.176 204.765 c116.176 204.765  L116.176 202.474 115.716 200.194 114.824 198.059 c113.931 195.885 112.63 193.924 111 192.294 c109.37 190.664 107.429 189.363 105.294 188.471 c103.159 187.578 100.858 187.118 98.529 187.118 c96.2 187.118 93.9 187.578 91.765 188.471 c89.63 189.363 87.689 190.664 86.059 192.294 c84.427 193.926 83.129 195.883 82.235 198.059 c81.342 200.196 80.882 202.472 80.882 204.765 c80.882 204.765  L[] 0 d 1 j 1 J0.118 w 0 G S34.059 204.765  m34.059 207.094 34.519 209.394 35.412 211.529 c36.305 213.666 37.604 215.604 39.235 217.235 c40.867 218.906 42.804 220.204 44.941 221.059 c47.115 221.952 49.416 222.412 51.706 222.412 c54.035 222.412 56.336 221.952 58.471 221.059 c60.606 220.205 62.546 218.904 64.176 217.235 c65.808 215.604 67.106 213.666 68 211.529 c68.893 209.394 69.353 207.094 69.353 204.765 c69.353 204.765  L69.353 202.474 68.893 200.194 68 198.059 c67.107 195.885 65.807 193.924 64.176 192.294 c62.546 190.664 60.606 189.363 58.471 188.471 c56.336 187.578 54.035 187.118 51.706 187.118 c49.416 187.118 47.115 187.578 44.941 188.471 c42.804 189.364 40.867 190.662 39.235 192.294 c37.605 193.924 36.305 195.885 35.412 198.059 c34.519 200.194 34.059 202.474 34.059 204.765 c34.059 204.765  L[] 0 d 1 j 1 J0.118 w 0 G S127.706 204.765  m127.706 207.096 128.145 209.393 129 211.529 c129.893 213.664 131.193 215.605 132.824 217.235 c134.493 218.904 136.453 220.205 138.588 221.059 c140.723 221.952 143.004 222.412 145.294 222.412 c147.625 222.412 149.922 221.952 152.059 221.059 c154.194 220.205 156.154 218.904 157.824 217.235 c159.455 215.604 160.753 213.666 161.647 211.529 c162.501 209.394 162.941 207.094 162.941 204.765 c162.941 204.765  L162.941 202.474 162.501 200.194 161.647 198.059 c160.754 195.885 159.454 193.924 157.824 192.294 c156.154 190.664 154.194 189.363 152.059 188.471 c149.922 187.577 147.625 187.118 145.294 187.118 c143.004 187.118 140.723 187.578 138.588 188.471 c136.453 189.363 134.493 190.664 132.824 192.294 c131.192 193.926 129.894 195.883 129 198.059 c128.146 200.194 127.706 202.474 127.706 204.765 c127.706 204.765  L[] 0 d 1 j 1 J0.118 w 0 G S32.294 246.882  m32.294 247.465 32.394 248.024 32.588 248.529 c32.821 249.073 33.141 249.553 33.529 249.941 c33.956 250.368 34.437 250.688 34.941 250.882 c35.485 251.115 36.045 251.235 36.588 251.235 c37.171 251.235 37.731 251.115 38.235 250.882 c38.779 250.688 39.259 250.368 39.647 249.941 c40.035 249.553 40.355 249.073 40.588 248.529 c40.821 248.024 40.941 247.465 40.941 246.882 c40.941 246.882  L40.941 246.338 40.821 245.779 40.588 245.235 c40.355 244.731 40.035 244.251 39.647 243.824 c39.259 243.435 38.779 243.115 38.235 242.882 c37.731 242.688 37.171 242.588 36.588 242.588 c36.044 242.588 35.485 242.688 34.941 242.882 c34.436 243.115 33.957 243.435 33.529 243.824 c33.141 244.251 32.821 244.731 32.588 245.235 c32.394 245.779 32.294 246.338 32.294 246.882 c32.294 246.882  L[] 0 d 1 j 1 J0.118 w 0 G S156.118 246.882  m156.118 247.465 156.237 248.024 156.471 248.529 c156.665 249.073 156.985 249.553 157.412 249.941 c157.8 250.369 158.26 250.688 158.765 250.882 c159.308 251.115 159.868 251.235 160.412 251.235 c160.994 251.235 161.574 251.115 162.118 250.882 c162.622 250.688 163.082 250.368 163.471 249.941 c163.898 249.553 164.218 249.073 164.412 248.529 c164.645 248.024 164.765 247.465 164.765 246.882 c164.765 246.882  L164.765 246.338 164.645 245.779 164.412 245.235 c164.218 244.731 163.898 244.251 163.471 243.824 c163.082 243.435 162.622 243.115 162.118 242.882 c161.574 242.688 160.994 242.588 160.412 242.588 c159.868 242.588 159.308 242.688 158.765 242.882 c158.26 243.115 157.8 243.435 157.412 243.824 c156.985 244.251 156.665 244.731 156.471 245.235 c156.237 245.779 156.118 246.338 156.118 246.882 c156.118 246.882  L[] 0 d 1 j 1 J0.118 w 0 G S80.882 158  m80.882 160.29 81.342 162.571 82.235 164.706 c83.128 166.88 84.428 168.84 86.059 170.471 c87.691 172.102 89.628 173.401 91.765 174.294 c93.902 175.188 96.198 175.647 98.529 175.647 c100.858 175.647 103.159 175.187 105.294 174.294 c107.429 173.401 109.37 172.101 111 170.471 c112.632 168.839 113.93 166.882 114.824 164.706 c115.716 162.571 116.176 160.29 116.176 158 c116.176 158  L116.176 155.671 115.716 153.37 114.824 151.235 c113.931 149.1 112.63 147.16 111 145.529 c109.37 143.86 107.429 142.56 105.294 141.706 c103.159 140.813 100.858 140.353 98.529 140.353 c96.2 140.353 93.9 140.813 91.765 141.706 c89.628 142.561 87.691 143.859 86.059 145.529 c84.428 147.16 83.128 149.1 82.235 151.235 c81.342 153.37 80.882 155.671 80.882 158 c80.882 158  L[] 0 d 1 j 1 J0.118 w 0 G S34.059 158  m34.059 160.29 34.519 162.571 35.412 164.706 c36.305 166.88 37.605 168.84 39.235 170.471 c40.867 172.102 42.804 173.401 44.941 174.294 c47.115 175.187 49.416 175.647 51.706 175.647 c54.035 175.647 56.336 175.187 58.471 174.294 c60.606 173.401 62.546 172.101 64.176 170.471 c65.808 168.839 67.106 166.882 68 164.706 c68.893 162.571 69.353 160.29 69.353 158 c69.353 158  L69.353 155.671 68.893 153.37 68 151.235 c67.107 149.1 65.807 147.16 64.176 145.529 c62.546 143.86 60.606 142.56 58.471 141.706 c56.336 140.813 54.035 140.353 51.706 140.353 c49.416 140.353 47.115 140.813 44.941 141.706 c42.804 142.561 40.867 143.859 39.235 145.529 c37.605 147.16 36.305 149.1 35.412 151.235 c34.519 153.37 34.059 155.671 34.059 158 c34.059 158  L[] 0 d 1 j 1 J0.118 w 0 G S127.706 158  m127.706 160.29 128.146 162.571 129 164.706 c129.893 166.88 131.193 168.84 132.824 170.471 c134.494 172.102 136.451 173.401 138.588 174.294 c140.723 175.187 143.004 175.647 145.294 175.647 c147.623 175.647 149.924 175.187 152.059 174.294 c154.194 173.401 156.154 172.101 157.824 170.471 c159.455 168.839 160.753 166.882 161.647 164.706 c162.501 162.571 162.941 160.29 162.941 158 c162.941 158  L162.941 155.671 162.501 153.37 161.647 151.235 c160.753 149.098 159.455 147.161 157.824 145.529 c156.154 143.86 154.194 142.56 152.059 141.706 c149.924 140.813 147.623 140.353 145.294 140.353 c143.004 140.353 140.723 140.813 138.588 141.706 c136.451 142.561 134.494 143.859 132.824 145.529 c131.193 147.16 129.893 149.1 129 151.235 c128.145 153.372 127.706 155.669 127.706 158 c127.706 158  L[] 0 d 1 j 1 J0.118 w 0 G S80.882 111.176  m80.882 113.508 81.342 115.804 82.235 117.941 c83.129 120.078 84.427 122.015 86.059 123.647 c87.689 125.277 89.63 126.578 91.765 127.471 c93.902 128.364 96.198 128.824 98.529 128.824 c100.858 128.824 103.159 128.363 105.294 127.471 c107.429 126.578 109.37 125.277 111 123.647 c112.63 122.017 113.931 120.076 114.824 117.941 c115.717 115.804 116.176 113.508 116.176 111.176 c116.176 111.176  L116.176 108.847 115.716 106.547 114.824 104.412 c113.931 102.277 112.63 100.336 111 98.706 c109.37 97.076 107.429 95.775 105.294 94.882 c103.159 93.99 100.858 93.529 98.529 93.529 c96.2 93.529 93.9 93.99 91.765 94.882 c89.63 95.775 87.689 97.076 86.059 98.706 c84.428 100.336 83.128 102.277 82.235 104.412 c81.342 106.547 80.882 108.847 80.882 111.176 c80.882 111.176  L[] 0 d 1 j 1 J0.118 w 0 G S34.059 111.176  m34.059 113.506 34.519 115.806 35.412 117.941 c36.305 120.076 37.605 122.017 39.235 123.647 c40.866 125.277 42.806 126.578 44.941 127.471 c47.115 128.363 49.416 128.824 51.706 128.824 c54.037 128.824 56.334 128.364 58.471 127.471 c60.606 126.578 62.546 125.277 64.176 123.647 c65.807 122.017 67.107 120.076 68 117.941 c68.893 115.806 69.353 113.506 69.353 111.176 c69.353 111.176  L69.353 108.845 68.894 106.549 68 104.412 c67.107 102.277 65.807 100.336 64.176 98.706 c62.546 97.076 60.606 95.775 58.471 94.882 c56.334 93.989 54.037 93.529 51.706 93.529 c49.416 93.529 47.115 93.99 44.941 94.882 c42.806 95.775 40.866 97.076 39.235 98.706 c37.605 100.336 36.305 102.277 35.412 104.412 c34.519 106.547 34.059 108.847 34.059 111.176 c34.059 111.176  L[] 0 d 1 j 1 J0.118 w 0 G S127.706 111.176  m127.706 113.508 128.145 115.804 129 117.941 c129.894 120.078 131.192 122.015 132.824 123.647 c134.493 125.277 136.453 126.578 138.588 127.471 c140.723 128.363 143.004 128.824 145.294 128.824 c147.623 128.824 149.924 128.363 152.059 127.471 c154.194 126.578 156.154 125.277 157.824 123.647 c159.454 122.017 160.754 120.076 161.647 117.941 c162.501 115.806 162.941 113.506 162.941 111.176 c162.941 111.176  L162.941 108.847 162.501 106.547 161.647 104.412 c160.753 102.275 159.455 100.338 157.824 98.706 c156.154 97.076 154.194 95.775 152.059 94.882 c149.924 93.99 147.623 93.529 145.294 93.529 c143.004 93.529 140.723 93.99 138.588 94.882 c136.453 95.775 134.493 97.076 132.824 98.706 c131.193 100.336 129.893 102.277 129 104.412 c128.146 106.547 127.706 108.847 127.706 111.176 c127.706 111.176  L[] 0 d 1 j 1 J0.118 w 0 G S80.882 64.412  m80.882 66.702 81.342 68.983 82.235 71.118 c83.128 73.253 84.428 75.213 86.059 76.882 c87.691 78.514 89.628 79.812 91.765 80.706 c93.902 81.561 96.198 82 98.529 82 c100.858 82 103.159 81.56 105.294 80.706 c107.429 79.813 109.37 78.513 111 76.882 c112.632 75.212 113.93 73.255 114.824 71.118 c115.717 68.981 116.176 66.704 116.176 64.412 c116.176 64.412  L116.176 62.083 115.716 59.782 114.824 57.647 c113.931 55.512 112.63 53.552 111 51.882 c109.37 50.252 107.429 48.952 105.294 48.059 c103.159 47.205 100.858 46.765 98.529 46.765 c96.2 46.765 93.9 47.205 91.765 48.059 c89.628 48.952 87.691 50.251 86.059 51.882 c84.428 53.552 83.128 55.512 82.235 57.647 c81.342 59.784 80.882 62.081 80.882 64.412 c80.882 64.412  L[] 0 d 1 j 1 J0.118 w 0 G S%%TrailerAdobe_Illustrator88 /terminate get execAdobe_pattern /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF