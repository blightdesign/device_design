%!PS-Adobe-2.0 EPSF-1.2%%Creator: Vectorworks 2015 SP2 [20.0.2(240846)] (64-Bit app)%%Title: ohma_panel.eps%%CreationDate: 12/8/2020%%DocumentProcSets: Adobe_packedarray 1.0 0%%DocumentSuppliedProcSets: Adobe_packedarray 1.0 0%%DocumentProcSets: Adobe_cmykcolor 1.1 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 1.1 0%%DocumentProcSets: Adobe_cshow 1.1 0%%DocumentSuppliedProcSets: Adobe_cshow 1.1 0%%DocumentProcSets: Adobe_customcolor 1.0 0%%DocumentSuppliedProcSets: Adobe_customcolor 1.0 0%%DocumentProcSets: Adobe_pattern 1.9 0%%DocumentSuppliedProcSets: Adobe_pattern 1.9 0%%DocumentProcSets: Adobe_Illustrator88 1.19 0%%DocumentSuppliedProcSets: Adobe_Illustrator88 1.19 0%%BoundingBox:0 0 198 284%%TemplateBox:306 396 306 396%%DocumentPreview: Header%%EndComments%%BeginProlog%%BeginProcSet: Adobe_packedarray 1.0 0userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet: Adobe_cmykcolor 1.1 0currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end end	Adobe_cmykcolor begin	} ifelse} def/terminate{currentdict Adobe_cmykcolor eq	{ end	} if} def/setcmykcolor{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 1.1 0currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 1.0 0currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_pattern 1.9 0currentpacking true setpackinguserdict /Adobe_pattern 14 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern begin	Adobe_pattern		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			break			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll pop pop pop pop pop pop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	pop pop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{pop pop}			{pop pop pop true}			{pop pop pop pop pop pop pop true}			{pop true}			pathforall			} stopped			{			pop pop pop pop pop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		pop pop		}		{		pop pop pop pop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternclipAdobe_pattern /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern /patternfill get exec			} pathforall		pop pop	pop		} stopped			{			pop pop pop pop pop			patternclip			Adobe_pattern /patternfill get exec			} if	}	{	patternclip	Adobe_pattern /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern /patternmatrix get 4 1 roll	} if	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	6 index 6 index 6 index	Adobe_pattern /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator88 1.19 0currentpacking true setpackinguserdict /Adobe_Illustrator88 73 dict dup begin put/initialize{userdict /Adobe_Illustrator88_vars 31 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator88 beginAdobe_Illustrator88 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator88 beginAdobe_Illustrator88_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator88_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/sp{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c{curveto} def/C/c load def/v{currentpoint 6 2 roll curveto} def/V/v load def/y{2 copy curveto} def/Y/y load def/l{lineto} def/L/l load def/m{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse/d{setdash} def/cfcurrentflat def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{newpath} def/n/N load def/F{_pf} def/f{closepathF} def/S{_ps} def/s{closepathS} def/B{gsave F grestoreS} def/b{closepathB} def/W{clip} def/ta{_as moveto_tt aload pop 4 -2 roll} def/tl{_tl aload pop translate} def/as{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm{_tm currentmatrix popconcat} def/I{tm/t	{	ta sp	tl	} ddef} def/o{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e{tm/t	{	ta _psf	tl	newpath	} ddef} def/r{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T{_tm setmatrix} def/Z{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def/u{} def/U{} def/q{gsave} def/Q{grestore} def/`{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			10 copy 6 npop exch pop patternashow			}			{			pop			7 copy 3 npop exch pop ashow			} ifelse		grestore		pop		} for	pop	} forrestore4 npop newpath} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			11 copy 6 npop 3 -1 roll pop patternashowstroke			}			{			pop			8 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestore5 npop newpath} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern /initialize get execAdobe_Illustrator88 /initialize get exec%%EndSetup0 A0 O0 R0 g0 G0 i 0 J 0 j 1 w 4 M [] 0 d32.647 23.353  m165.118 23.353  L166.36 23.353 167.58 23.593 168.706 24.059 c169.87 24.563 170.911 25.264 171.765 26.118 c172.619 26.972 173.299 28.012 173.765 29.176 c174.269 30.302 174.529 31.503 174.529 32.706 c174.529 32.706  L174.529 251.588  L174.529 252.832 174.27 254.05 173.765 255.176 c173.298 256.342 172.619 257.381 171.765 258.235 c170.91 259.09 169.871 259.769 168.706 260.235 c167.579 260.74 166.361 261 165.118 261 c165.118 261  L32.647 261  L31.444 261 30.223 260.74 29.059 260.235 c27.932 259.769 26.914 259.09 26.059 258.235 c25.165 257.381 24.466 256.342 24 255.176 c23.534 254.051 23.294 252.83 23.294 251.588 c23.294 251.588  L23.294 32.706  L23.294 31.503 23.534 30.302 24 29.176 c24.466 28.012 25.166 26.972 26.059 26.118 c26.913 25.264 27.933 24.563 29.059 24.059 c30.223 23.593 31.444 23.353 32.647 23.353 c32.647 23.353  L[] 0 d 1 j 1 J0.118 w 0 G S156.529 37.059  m156.529 37.603 156.629 38.162 156.824 38.706 c157.056 39.211 157.377 39.691 157.765 40.118 c158.153 40.506 158.633 40.826 159.176 41.059 c159.681 41.253 160.241 41.353 160.824 41.353 c161.406 41.353 161.966 41.253 162.471 41.059 c163.014 40.826 163.494 40.506 163.882 40.118 c164.271 39.691 164.591 39.211 164.824 38.706 c165.018 38.162 165.118 37.603 165.118 37.059 c165.118 37.059  L165.118 36.476 165.018 35.917 164.824 35.412 c164.591 34.868 164.271 34.388 163.882 34 c163.494 33.612 163.014 33.292 162.471 33.059 c161.966 32.826 161.406 32.706 160.824 32.706 c160.241 32.706 159.682 32.826 159.176 33.059 c158.633 33.292 158.153 33.611 157.765 34 c157.377 34.388 157.056 34.868 156.824 35.412 c156.629 35.917 156.529 36.476 156.529 37.059 c156.529 37.059  L[] 0 d 1 j 1 J0.118 w 0 G S81.235 205.176  m81.235 207.506 81.695 209.806 82.588 211.941 c83.482 214.078 84.78 216.015 86.412 217.647 c88.042 219.277 90.003 220.578 92.176 221.471 c94.313 222.364 96.59 222.824 98.882 222.824 c101.211 222.824 103.512 222.363 105.647 221.471 c107.782 220.578 109.723 219.277 111.353 217.647 c113.022 216.017 114.322 214.076 115.176 211.941 c116.07 209.804 116.529 207.508 116.529 205.176 c116.529 205.176  L116.529 202.847 116.069 200.547 115.176 198.412 c114.322 196.277 113.022 194.336 111.353 192.706 c109.723 191.076 107.782 189.775 105.647 188.882 c103.512 187.99 101.211 187.529 98.882 187.529 c96.592 187.529 94.311 187.99 92.176 188.882 c90.001 189.776 88.044 191.074 86.412 192.706 c84.781 194.336 83.481 196.277 82.588 198.412 c81.695 200.547 81.235 202.847 81.235 205.176 c81.235 205.176  L[] 0 d 1 j 1 J0.118 w 0 G S34.471 205.176  m34.471 207.506 34.931 209.806 35.824 211.941 c36.717 214.078 38.015 216.015 39.647 217.647 c41.279 219.279 43.216 220.577 45.353 221.471 c47.488 222.363 49.789 222.824 52.118 222.824 c54.408 222.824 56.709 222.363 58.882 221.471 c61.017 220.578 62.958 219.277 64.588 217.647 c66.22 216.015 67.518 214.078 68.412 211.941 c69.305 209.806 69.765 207.506 69.765 205.176 c69.765 205.176  L69.765 202.847 69.305 200.547 68.412 198.412 c67.519 196.277 66.219 194.336 64.588 192.706 c62.958 191.076 61.017 189.775 58.882 188.882 c56.709 187.99 54.408 187.529 52.118 187.529 c49.789 187.529 47.488 187.99 45.353 188.882 c43.216 189.776 41.279 191.074 39.647 192.706 c38.017 194.336 36.716 196.277 35.824 198.412 c34.931 200.547 34.471 202.847 34.471 205.176 c34.471 205.176  L[] 0 d 1 j 1 J0.118 w 0 G S128.059 205.176  m128.059 207.506 128.519 209.806 129.412 211.941 c130.305 214.076 131.605 216.017 133.235 217.647 c134.867 219.279 136.804 220.577 138.941 221.471 c141.078 222.364 143.375 222.824 145.706 222.824 c148.035 222.824 150.336 222.363 152.471 221.471 c154.606 220.578 156.546 219.277 158.176 217.647 c159.807 216.017 161.107 214.076 162 211.941 c162.894 209.804 163.353 207.508 163.353 205.176 c163.353 205.176  L163.353 202.845 162.894 200.549 162 198.412 c161.107 196.277 159.807 194.336 158.176 192.706 c156.545 191.074 154.607 189.776 152.471 188.882 c150.336 187.99 148.035 187.529 145.706 187.529 c143.377 187.529 141.076 187.99 138.941 188.882 c136.804 189.776 134.867 191.074 133.235 192.706 c131.604 194.338 130.305 196.275 129.412 198.412 c128.519 200.547 128.059 202.847 128.059 205.176 c128.059 205.176  L[] 0 d 1 j 1 J0.118 w 0 G S32.647 247.294  m32.647 247.877 32.767 248.436 33 248.941 c33.194 249.485 33.514 249.965 33.941 250.353 c34.329 250.741 34.809 251.061 35.353 251.294 c35.858 251.488 36.418 251.588 37 251.588 c37.543 251.588 38.104 251.488 38.647 251.294 c39.152 251.061 39.632 250.741 40.059 250.353 c40.447 249.965 40.767 249.485 41 248.941 c41.194 248.436 41.294 247.877 41.294 247.294 c41.294 247.294  L41.294 246.711 41.194 246.152 41 245.647 c40.767 245.104 40.447 244.623 40.059 244.235 c39.632 243.847 39.152 243.527 38.647 243.294 c38.104 243.1 37.543 243 37 243 c36.417 243 35.858 243.1 35.353 243.294 c34.809 243.527 34.33 243.847 33.941 244.235 c33.514 244.623 33.194 245.104 33 245.647 c32.767 246.152 32.647 246.711 32.647 247.294 c32.647 247.294  L[] 0 d 1 j 1 J0.118 w 0 G S156.529 247.294  m156.529 247.877 156.629 248.436 156.824 248.941 c157.056 249.485 157.377 249.965 157.765 250.353 c158.153 250.741 158.633 251.061 159.176 251.294 c159.681 251.488 160.241 251.588 160.824 251.588 c161.406 251.588 161.966 251.488 162.471 251.294 c163.014 251.061 163.494 250.741 163.882 250.353 c164.271 249.965 164.591 249.485 164.824 248.941 c165.018 248.436 165.118 247.877 165.118 247.294 c165.118 247.294  L165.118 246.711 165.018 246.152 164.824 245.647 c164.591 245.104 164.271 244.623 163.882 244.235 c163.494 243.847 163.014 243.527 162.471 243.294 c161.966 243.1 161.406 243 160.824 243 c160.241 243 159.682 243.1 159.176 243.294 c158.633 243.527 158.153 243.847 157.765 244.235 c157.377 244.623 157.056 245.104 156.824 245.647 c156.629 246.152 156.529 246.711 156.529 247.294 c156.529 247.294  L[] 0 d 1 j 1 J0.118 w 0 G S81.235 158.353  m81.235 160.682 81.695 162.983 82.588 165.118 c83.481 167.253 84.781 169.193 86.412 170.824 c88.044 172.494 90.001 173.792 92.176 174.647 c94.313 175.541 96.59 176 98.882 176 c101.211 176 103.512 175.54 105.647 174.647 c107.782 173.793 109.723 172.493 111.353 170.824 c113.024 169.192 114.322 167.255 115.176 165.118 c116.069 162.983 116.529 160.682 116.529 158.353 c116.529 158.353  L116.529 156.063 116.069 153.782 115.176 151.647 c114.322 149.473 113.022 147.513 111.353 145.882 c109.723 144.252 107.782 142.952 105.647 142.059 c103.512 141.166 101.211 140.706 98.882 140.706 c96.592 140.706 94.311 141.166 92.176 142.059 c90.001 142.952 88.044 144.251 86.412 145.882 c84.781 147.513 83.481 149.473 82.588 151.647 c81.695 153.782 81.235 156.063 81.235 158.353 c81.235 158.353  L[] 0 d 1 j 1 J0.118 w 0 G S34.471 158.353  m34.471 160.682 34.931 162.983 35.824 165.118 c36.716 167.253 38.017 169.193 39.647 170.824 c41.279 172.494 43.216 173.792 45.353 174.647 c47.488 175.54 49.789 176 52.118 176 c54.408 176 56.709 175.54 58.882 174.647 c61.017 173.793 62.958 172.493 64.588 170.824 c66.22 169.192 67.518 167.255 68.412 165.118 c69.305 162.983 69.765 160.682 69.765 158.353 c69.765 158.353  L69.765 156.063 69.305 153.782 68.412 151.647 c67.519 149.473 66.219 147.513 64.588 145.882 c62.958 144.252 61.017 142.952 58.882 142.059 c56.709 141.166 54.408 140.706 52.118 140.706 c49.789 140.706 47.488 141.166 45.353 142.059 c43.216 142.952 41.279 144.251 39.647 145.882 c38.017 147.513 36.716 149.473 35.824 151.647 c34.931 153.782 34.471 156.063 34.471 158.353 c34.471 158.353  L[] 0 d 1 j 1 J0.118 w 0 G S128.059 158.353  m128.059 160.682 128.519 162.983 129.412 165.118 c130.305 167.253 131.605 169.193 133.235 170.824 c134.867 172.494 136.804 173.792 138.941 174.647 c141.078 175.541 143.375 176 145.706 176 c148.035 176 150.336 175.54 152.471 174.647 c154.606 173.793 156.546 172.493 158.176 170.824 c159.808 169.192 161.106 167.255 162 165.118 c162.893 162.983 163.353 160.682 163.353 158.353 c163.353 158.353  L163.353 156.063 162.893 153.782 162 151.647 c161.107 149.473 159.807 147.513 158.176 145.882 c156.545 144.251 154.607 142.952 152.471 142.059 c150.336 141.166 148.035 140.706 145.706 140.706 c143.377 140.706 141.076 141.166 138.941 142.059 c136.804 142.952 134.867 144.251 133.235 145.882 c131.605 147.513 130.305 149.473 129.412 151.647 c128.519 153.782 128.059 156.063 128.059 158.353 c128.059 158.353  L[] 0 d 1 j 1 J0.118 w 0 G S81.235 111.588  m81.235 113.879 81.695 116.159 82.588 118.294 c83.481 120.468 84.781 122.428 86.412 124.059 c88.044 125.691 90.001 126.989 92.176 127.882 c94.313 128.776 96.59 129.235 98.882 129.235 c101.211 129.235 103.512 128.775 105.647 127.882 c107.782 126.99 109.723 125.689 111.353 124.059 c113.024 122.427 114.322 120.47 115.176 118.294 c116.069 116.159 116.529 113.879 116.529 111.588 c116.529 111.588  L116.529 109.259 116.069 106.959 115.176 104.824 c114.322 102.689 113.022 100.748 111.353 99.118 c109.723 97.487 107.782 96.187 105.647 95.294 c103.512 94.401 101.211 93.941 98.882 93.941 c96.59 93.941 94.313 94.401 92.176 95.294 c90.003 96.187 88.042 97.487 86.412 99.118 c84.78 100.749 83.482 102.687 82.588 104.824 c81.695 106.959 81.235 109.259 81.235 111.588 c81.235 111.588  L[] 0 d 1 j 1 J0.118 w 0 G S34.471 111.588  m34.471 113.879 34.931 116.159 35.824 118.294 c36.716 120.468 38.017 122.428 39.647 124.059 c41.279 125.691 43.216 126.989 45.353 127.882 c47.488 128.775 49.789 129.235 52.118 129.235 c54.41 129.235 56.707 128.776 58.882 127.882 c61.017 126.99 62.958 125.689 64.588 124.059 c66.22 122.427 67.518 120.47 68.412 118.294 c69.305 116.159 69.765 113.879 69.765 111.588 c69.765 111.588  L69.765 109.257 69.305 106.96 68.412 104.824 c67.518 102.687 66.22 100.749 64.588 99.118 c62.956 97.486 61.019 96.188 58.882 95.294 c56.707 94.401 54.41 93.941 52.118 93.941 c49.789 93.941 47.488 94.401 45.353 95.294 c43.218 96.187 41.277 97.487 39.647 99.118 c38.017 100.748 36.716 102.689 35.824 104.824 c34.93 106.96 34.471 109.257 34.471 111.588 c34.471 111.588  L[] 0 d 1 j 1 J0.118 w 0 G S128.059 111.588  m128.059 113.879 128.519 116.159 129.412 118.294 c130.305 120.47 131.604 122.427 133.235 124.059 c134.866 125.689 136.806 126.99 138.941 127.882 c141.076 128.775 143.377 129.235 145.706 129.235 c148.035 129.235 150.336 128.775 152.471 127.882 c154.606 126.99 156.546 125.689 158.176 124.059 c159.808 122.427 161.106 120.47 162 118.294 c162.893 116.159 163.353 113.879 163.353 111.588 c163.353 111.588  L163.353 109.259 162.893 106.959 162 104.824 c161.106 102.687 159.808 100.749 158.176 99.118 c156.546 97.487 154.606 96.187 152.471 95.294 c150.336 94.401 148.035 93.941 145.706 93.941 c143.375 93.941 141.078 94.401 138.941 95.294 c136.806 96.187 134.866 97.487 133.235 99.118 c131.604 100.749 130.305 102.687 129.412 104.824 c128.519 106.959 128.059 109.259 128.059 111.588 c128.059 111.588  L[] 0 d 1 j 1 J0.118 w 0 G S81.235 64.765  m81.235 67.094 81.695 69.394 82.588 71.529 c83.481 73.664 84.781 75.605 86.412 77.235 c88.044 78.867 90.001 80.165 92.176 81.059 c94.311 81.952 96.592 82.412 98.882 82.412 c101.213 82.412 103.51 81.952 105.647 81.059 c107.784 80.165 109.721 78.867 111.353 77.235 c113.022 75.605 114.322 73.664 115.176 71.529 c116.069 69.394 116.529 67.094 116.529 64.765 c116.529 64.765  L116.529 62.434 116.07 60.137 115.176 58 c114.322 55.865 113.022 53.924 111.353 52.294 c109.723 50.664 107.782 49.363 105.647 48.471 c103.51 47.577 101.213 47.118 98.882 47.118 c96.592 47.118 94.311 47.578 92.176 48.471 c90.001 49.364 88.044 50.662 86.412 52.294 c84.78 53.926 83.482 55.863 82.588 58 c81.695 60.135 81.235 62.436 81.235 64.765 c81.235 64.765  L[] 0 d 1 j 1 J0.118 w 0 G S32.647 37.059  m32.647 37.603 32.767 38.162 33 38.706 c33.194 39.211 33.514 39.691 33.941 40.118 c34.329 40.506 34.809 40.826 35.353 41.059 c35.858 41.253 36.418 41.353 37 41.353 c37.543 41.353 38.104 41.253 38.647 41.059 c39.152 40.826 39.632 40.506 40.059 40.118 c40.447 39.691 40.767 39.211 41 38.706 c41.194 38.162 41.294 37.603 41.294 37.059 c41.294 37.059  L41.294 36.476 41.194 35.917 41 35.412 c40.767 34.868 40.447 34.388 40.059 34 c39.632 33.612 39.152 33.292 38.647 33.059 c38.104 32.826 37.543 32.706 37 32.706 c36.417 32.706 35.858 32.826 35.353 33.059 c34.809 33.292 34.33 33.611 33.941 34 c33.514 34.388 33.194 34.868 33 35.412 c32.767 35.917 32.647 36.476 32.647 37.059 c32.647 37.059  L[] 0 d 1 j 1 J0.118 w 0 G S%%TrailerAdobe_Illustrator88 /terminate get execAdobe_pattern /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF